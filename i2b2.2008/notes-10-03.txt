Modified WordToken - add negated and possible boolean attributes
create table v_i2b2_fword_lookup: data/v_i2b2_fword_lookup.sql

run cpe:
{{{ 
nohup ant -Dytex.home=${YTEX_HOME} RunCPE > ant.out 2>&1 &
}}}

Change analysis batches - rename the new batch to i2b2.2008 so all the scripts work as is.
{{{
update classifier_eval set name = 'i2b2.2008-badstems' where name = 'i2b2.2008';
update ytex.document set analysis_batch = 'i2b2.2008-badstems' where analysis_batch = 'i2b2.2008';
update ytex.document set analysis_batch = 'i2b2.2008' where analysis_batch = 'i2b2.2008-word';
}}}


clean up old feature evaluations
{{{
delete e, r 
from feature_eval e inner join feature_rank r on e.feature_eval_id = r.feature_eval_id
where corpus_name = 'i2b2.2008' 
and type = 'InfoGainAttributeEval'  
and featureset_name = 'word';
}}}

Re-compute infogain, with & without negation detection
for negation detection, word falls in one of 4 bins:
null - not present
pos - affirmed
neg - negated
posneg - affirmed and negated
{{{
ant -Dytex.home=E:\projects\ytex -Dconfig.local=E:\projects\ytex\config.local\src -Deval.infogain.prop=infogain-word.xml eval.infogain > ant.out 2>&1
ant -Dytex.home=E:\projects\ytex -Dconfig.local=E:\projects\ytex\config.local\src -Deval.infogain.prop=infogain-word-neg.xml eval.infogain > ant.out 2>&1

nohup ant -Dytex.home=${YTEX_HOME} -Deval.infogain.prop=infogain-word.xml eval.infogain > ant.out 2>&1
nohup ant -Dytex.home=${YTEX_HOME} -Deval.infogain.prop=infogain-word-neg.xml eval.infogain > ant.out 2>&1
}}}

Export data
{{{
cd ${HOME}/ytexProjects/i2b2.2008
nohup ant -Dytex.home=${YTEX_HOME} -Dkernel.experiment=bag-word export.cutoffs > ant.out 2>&1 &
}}}

Run libsvm
{{{
cd ${HOME}/ytexWorkspace/ytex.kernel/scripts
nohup ant -Dytex.home=${YTEX_HOME} -Dkernel.exp.base=${HOME}/ytexProjects/i2b2.2008/libsvm/bag-word iter.dirs > ant.out 2>&1 &
}}}

Problem with cleaning up results - for some cutoffs+folds there is only 1 class left.
TODO: adapt query used for svmlin for inserting 'missing' classifier_eval_ir rows

This query/table gets the unique labels per fold
{{{
create table i2b2_2008_fold_class as
    select distinct f.cv_fold_id, ds.disease, ds.disease_id, j.judgement_id
    from i2b2_2008_doc d /* get class ids for each doc and fold */
    inner join i2b2_2008_anno a on d.docId = a.docId and a.source = 'intuitive'
    inner join i2b2_2008_disease ds on ds.disease = a.disease
    inner join i2b2_2008_judgement j on j.judgement = a.judgement
    inner join cv_fold_instance fi on fi.instance_id = d.docId and fi.train = 0
    inner join cv_fold f 
        on f.cv_fold_id = fi.cv_fold_id 
        and f.label = a.disease
        and f.corpus_name = 'i2b2.2008'
;
create unique index IX_i2b2_2008_fold_class on i2b2_2008_fold_class(cv_fold_id, disease, disease_id, judgement_id);
}}}

{{{
-- ran this query which screwed things up
insert into classifier_eval_ir (classifier_eval_id, ir_class_id, tp, tn, fn, fp)
select fc.classifier_eval_id, fc.judgement_id, 
    0 tp, 
    sum(j.judgement_id <> fc.judgement_id) tn,
    sum(j.judgement_id = fc.judgement_id) fn,
    0 fp
from
/* get fold, classifier evaluation, and missing class ids */
(
    select fc.*, e.classifier_eval_id, e.param1
    from i2b2_2008_fold_class fc
    inner join cv_fold f 
        on f.label = fc.disease 
        and f.corpus_name = 'i2b2.2008'
    inner join classifier_eval e
        on e.name = 'i2b2.2008'
        and e.experiment = 'bag-word'
        and e.label = fc.disease_id
        and e.run = f.run
        and e.fold = f.fold
    /* filter out the class ids for which we have the ir metrics */
    left join classifier_eval_ir ir 
        on ir.classifier_eval_id = e.classifier_eval_id 
        and ir.ir_class_id = fc.judgement_id
    where ir.classifier_eval_ir_id is null
) fc
/* get the test instances for this fold */
inner join cv_fold_instance fi 
    on fi.cv_fold_id = fc.cv_fold_id 
    and fi.train = 0
/* get the judgement for these instances */
inner join i2b2_2008_anno a 
    on a.docId = fi.instance_id 
    and a.source = 'intuitive' 
    and a.disease = fc.disease
inner join i2b2_2008_judgement j 
    on j.judgement = a.judgement
inner join hotspot_instance i 
    on i.experiment = 'bag-word' 
    and i.label = fc.disease 
    and i.instance_id = fi.instance_id
/* filter out zero vectors */
left join hotspot_zero_vector zv 
    on zv.hotspot_instance_id = i.hotspot_instance_id 
    and zv.cutoff = fc.param1
where zv.hotspot_zero_vector_id is null
group by fc.classifier_eval_id, fc.judgement_id
;
}}}

table with best results:
{{{
drop table if exists i2b2_2008_cv_best ;
create table i2b2_2008_cv_best (
    label varchar(50),
    f1 double,
    experiment varchar(50),
    kernel int,
    cost double,
    weight varchar(50),
    param1 double,
    param2 varchar(50)
) engine = myisam;
}}}

generate parameters.properties like this:
{{{
select cast(concat('label', label, '_train_data.kernel.evalLines=', weight, '-q -b 1 -c ', cost) as char(200))
from i2b2_2008_cv_best 
where experiment = 'bag-word';
}}}

cleanup:
{{{
delete e,s,i,z
from classifier_eval e
inner join classifier_eval_svm s on e.classifier_eval_id = s.classifier_eval_id
inner join classifier_eval_ir i on e.classifier_eval_id = i.classifier_eval_id
inner join classifier_eval_irzv z on e.classifier_eval_id = z.classifier_eval_id
where e.experiment = 'bag-word-test' and e.name = 'i2b2.2008'
}}}

export, run libsvm, update param1 :
{{{
update classifier_eval e
inner join i2b2_2008_cv_best b on b.label = e.label and b.experiment = 'bag-word'
set e.param1 = b.param1
where e.experiment = 'bag-word-test' and e.name = 'i2b2.2008';
}}}

== Summary ==
Fixing stems + negex + min cutoff didn't help - hurt a little
Part of the hurt is due to selecting the minimal instead of maximal cutoff - eg. asthma - included more docs, more errors
Part of the hurt is due to negex - eg. diabetes - same # docs, but performance lower
Need to do following: 
  - use max cutoff 
  - add negex as additional feature.  i.e. 1 feature if present + 1 feature if negated
Before that, go all the way to the beginning and try to follow ambert's recipe exactly:
  - raw words
  - 200 character window around hotspot
 
== Loading ambert's system outputs ==
use SystemOutputLoaderImpl
use following sql to get macro-f1:
{{{
create temporary table ambert_tt as
select s.output,
    s.disease,
    j.judgement,
    sum(if(j.judgement = a.judgement and s.judgment = a.judgement, 1, 0)) tp,
    sum(if(j.judgement = a.judgement and s.judgment <> a.judgement, 1, 0)) fn,
    sum(if(j.judgement <> a.judgement and s.judgment <> j.judgement, 1, 0)) tn,
    sum(if(j.judgement <> a.judgement and s.judgment = j.judgement, 1, 0)) fp
from i2b2_2008_system_output s
inner join i2b2_2008_anno a on a.source = s.source and a.disease = s.disease and a.docId = s.docId
inner join (
    select distinct disease, judgement
    from i2b2_2008_anno a
    inner join i2b2_2008_doc d on a.docId = d.docId and d.documentSet = 'test'
    where a.source = 'intuitive'
) j on a.disease = j.disease
where s.source = 'intuitive'
group by s.output, s.disease, j.judgement
;

create table ambert_ir as
select *, truncate(if(ppv+sens >0, 2*ppv*sens/(ppv+sens), 0),4) f1, tp+fn+tn+fp tot
from
(
select *, truncate(if(tp+fp > 0, tp/(tp+fp), 0),4) ppv,  truncate(if(tp+fn > 0, tp/(tp+fn), 0),4) sens
from ambert_tt
) s;

create unique index NK_ambert_ir on ambert_ir(output, disease, judgement);

select output, disease, avg(f1) f1
from ambert_ir 
group by output, disease
order by output, disease;
}}}


