<!--
* annotate documents
* evaluate features
	** evaluate word features - InfogainEvaluator
	** evaluate concepts + words outside concepts - InfogainEvaluator
	** evaluate concepts w/ ontology + words outside concepts - CorpusEvaluator + CorpusLabelEvaluator
	** bin w/ binary (0/1), and w/ negation detection (-1/0/1)
* identify hotspots for each feature set
* evaluate bag-of-words
	** export bag of words for range of hotspot cutoffs
		*** identify zero vectors
		*** export data - binary indicator vs. tfidf
		*** run libsvm
		*** construct combined truth table - zv + classifier results
* evaluate kernel
	** semantic kernel
	** context-sensitive semantic kernel
-->
<project name="i2b2">
	<property environment="env" />
	<property name="ytex.home" value=".." />
	<include file="${ytex.home}/libs.system/build-classpath.xml" />
	<property name="mysql.home" value="${env.MYSQL_HOME}" />
	<property name="mysql.line" value="--user=${db.username} --password=${db.password} --host=${db.host} ${db.schema}" />
	<target name="init.exp">
		<property file="${basedir}/exp/${kernel.experiment}/experiment.properties" />
	</target>

	<target name="runCPE" description="annotate i2b2 corpus">
		<java classname="ytex.tools.RunCPE" fork="yes" classpathref="i2b2.cp">
			<arg value="./desc/ytex/uima/i2b2/cpe.xml" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="bocuis.hotspot" description="execute scripts to identify hotspot sentences">
		<antcall target="mysql">
			<param name="mysql.dir" value="libsvm/bocuis" />
			<param name="mysql.script" value="insert_hotspot.sql" />
		</antcall>
	</target>
	<target name="bocuis.export" description="export libsvm data for bocuis">
		<for list="${export.cutoffs}" param="export.cutoff">
			<sequential>
				<antcall target="bocuis.export.cutoff">
					<param name="export.cutoff" value="@{export.cutoff}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="ambert.export" description="export libsvm data for bocuis">
		<for list="${export.cutoffs}" param="export.cutoff">
			<sequential>
				<antcall target="export.cutoff">
					<param name="export.cutoff" value="@{export.cutoff}" />
					<param name="experiment.base" value="ambert" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="ontocuis.export" description="export libsvm data for ontocuis">
		<antcall target="export.cutoffs">
			<param name="kernel.experiment" value="ontocuis" />
		</antcall>
	</target>
	<target name="insert_hotspot_zero_vector_tt" depends="init.exp" description="setup truth table for ontocuis">
		<property name="mysql.script" value="insert_hotspot_zero_vector_tt.sql" />
		<copy file="data/${mysql.script}" todir="libsvm/${kernel.experiment}" overwrite="yes">
			<filterset>
				<filter token="kernel.experiment" value="${kernel.experiment}" />
			</filterset>
		</copy>
		<antcall target="mysql">
			<param name="mysql.dir" value="${java.io.tmpdir}" />
			<param name="mysql.script" value="${mysql.script}" />
		</antcall>
	</target>
	<target name="insert_classifier_eval_irzv" depends="init.exp" description="setup truth table for ontocuis">
		<property name="kernel.hzv.experiment" value="${kernel.experiment}" />
		<copy file="data/insert_classifier_eval_irzv.template.sql" tofile="libsvm/${kernel.experiment}/insert_classifier_eval_irzv.sql" overwrite="yes">
			<filterset>
				<filter token="kernel.experiment" value="${kernel.experiment}" />
				<filter token="kernel.hzv.experiment" value="${kernel.hzv.experiment}" />
			</filterset>
		</copy>
		<antcall target="mysql">
			<param name="mysql.dir" value="libsvm/${kernel.experiment}" />
			<param name="mysql.script" value="insert_classifier_eval_irzv.sql" />
		</antcall>
	</target>
	<target name="export.cutoffs" depends="init.exp" description="export libsvm data for bocuis">
		<for list="${export.cutoffs}" param="export.cutoff">
			<sequential>
				<antcall target="export.cutoff">
					<param name="export.cutoff" value="@{export.cutoff}" />
					<param name="experiment.base" value="${kernel.experiment}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="export.cutoff" depends="init.exp" description="export libsvm data for specified cutoff">
		<property name="export.cutoff" value="0.25" />
		<property name="export.dir" value="libsvm/${kernel.experiment}/${export.cutoff}" />
		<!-- generate script to find zero vectors for cutoff -->
		<delete dir="${export.dir}" quiet="yes" />
		<mkdir dir="${export.dir}" />
		<filterset id="export.filterset">
			<filter token="export.cutoff" value="${export.cutoff}" />
			<filter token="kernel.name" value="${kernel.name}" />
			<filter token="kernel.experiment" value="${kernel.experiment}" />
		</filterset>
		<!-- generate export property file -->
		<copy todir="${export.dir}" overwrite="yes">
			<fileset dir="exp/${kernel.experiment}" includes="*.template" />
			<globmapper from="*.template" to="*" />
			<filterset refid="export.filterset" />
		</copy>
		<!-- run script to insert zero vectors for the cutoff -->
		<antcall target="mysql">
			<param name="mysql.dir" value="${export.dir}" />
			<param name="mysql.script" value="insert_hotspot_zv.sql" />
		</antcall>
		<!-- export the data -->
		<antcall target="SparseDataExporter">
			<param name="export.type" value="libsvm" />
			<param name="export.dir" value="${export.dir}" />
		</antcall>
	</target>
	<target name="export.test" description="export libsvm data for train/test sets">
		<property name="experiment.base" value="bocuis" />
		<property name="export.dir" value="libsvm/${experiment.base}-test" />
		<mkdir dir="${export.dir}" />
		<copy todir="${export.dir}" overwrite="yes">
			<fileset dir="libsvm/${experiment.base}" includes="export-test.xml,get_best_param.sql" />
		</copy>
		<!-- export optimal parameters -->
		<exec executable="${mysql.home}/mysql" dir="${export.dir}" output="${export.dir}/optimalParams.properties">
			<arg line="${mysql.line}" />
			<arg value="-s" />
			<arg value="-e" />
			<arg value="source get_best_param.sql" />
		</exec>
		<!-- export the data -->
		<antcall target="SparseDataExporter">
			<param name="export.type" value="libsvm" />
			<param name="export.dir" value="${export.dir}" />
			<param name="export.prop" value="export-test.xml" />
		</antcall>
	</target>
	<target name="eval.test.all" description="export data, run libsvm, run post-processing scripts">
		<property name="experiment.base" value="bocuis" />
		<!-- select optimal params based on cross-validation -->
		<antcall target="mysql">
			<param name="mysql.dir" value="./libsvm/${experiment.base}" />
			<param name="mysql.script" value="update_i2b2_best_libsvm.sql" />
		</antcall>
		<!-- prepare zero-vector truth table -->
		<antcall target="mysql">
			<param name="mysql.dir" value="./libsvm/${experiment.base}" />
			<param name="mysql.script" value="insert_hotspot_zero_vector_tt_test.sql" />
		</antcall>
		<!-- export test data -->
		<antcall target="export.test" />
		<!-- export test data -->
		<antcall target="test.eval.all" />
		<!-- create truth table with zero vectors -->
		<antcall target="mysql">
			<param name="mysql.dir" value="./libsvm/${experiment.base}" />
			<param name="mysql.script" value="insert_classifier_eval_irzv_test.sql" />
		</antcall>
	</target>
	<target name="test.eval.all" description="evaluate libsvm on test data">
		<property name="experiment.base" value="ambert" />
		<!-- run libsvm on test data -->
		<ant antfile="build.xml" dir="../ytex.kernel/libsvm" target="test.eval.all" inheritall="false">
			<property name="ytex.home" value="../.." />
			<property name="libsvm.experiment" value="${experiment.base}-test" />
			<property name="libsvm.data" value="../../i2b2.2008/libsvm/${experiment.base}-test" />
		</ant>
	</target>
	<target name="bocuis.libsvm.cutoffs" description="run libsvm on all cutoffs">
		<for list="${bocuis.export.cutoffs}" param="export.cutoff">
			<sequential>
				<antcall target="bocuis.libsvm.cutoff">
					<param name="export.cutoff" value="@{export.cutoff}" />
				</antcall>
			</sequential>
		</for>
	</target>

	<target name="kernel.all" depends="kernel.eval.all,kernel.export.all,kernel.libsvm,insert_classifier_eval_irzv" description="evaluate kernel on corpus, run libsvm, update ir metrics w/ zero vectors" />
	<target name="kernel.libsvm" depends="init.exp" description="launch libsvm">
		<ant antfile="build.xml" dir="${ytex.home}/ytex.kernel/scripts" target="iter.dirs" inheritall="true">
			<property name="ytex.home" value="${ytex.home}" />
			<property name="kernel.exp.base" value="${ytex.home}/i2b2.2008/libsvm/${kernel.experiment}" />
		</ant>
	</target>
	<target name="kernel.iter.label" description="execute kernel.iter.target for each label in label.properties">
		<property file="./tree/${tree.name}/label.properties" />
		<for list="${labels}" param="export.label">
			<sequential>
				<antcall target="${kernel.iter.target}">
					<param name="export.label" value="@{export.label}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="kernel.tree.all" depends="init.exp" description="export trees">
		<property name="tree.name" value="vector" />
		<antcall target="kernel.iter.label">
			<param name="kernel.iter.target" value="kernel.tree.label" />
		</antcall>
	</target>
	<target name="kernel.eval.all" depends="init.exp" description="eval kernel on tree">
		<property name="kernel.experiment" value="filteredlin" />
		<property name="tree.name" value="vector" />
		<antcall target="kernel.iter.label">
			<param name="kernel.iter.target" value="kernel.iter.eval.label" />
		</antcall>
	</target>
	<target name="kernel.export.all" depends="init.exp" description="export libsvm gram matrices">
		<property name="kernel.experiment" value="filteredlin" />
		<property name="tree.name" value="vector" />
		<antcall target="kernel.iter.label">
			<param name="kernel.iter.target" value="kernel.iter.export.label" />
		</antcall>
	</target>
	<target name="kernel.init.label" depends="init.exp" description="load the export.cutoff for the specified label">
		<property name="tree.name" value="tree-cuiword" />
		<property name="export.label" value="7" />
		<property name="kernel.experiment" value="kern-cuiword-dot" />
		<property name="export.tree.srcdir" value="./exp/${tree.name}" />
		<property name="export.tree.basedir" value="./tree/${tree.name}" />
		<property name="export.tree.outdir" value="./tree/${tree.name}/${export.label}" />
		<property name="export.libsvm.outdir" value="libsvm/${kernel.experiment}" />
		<property file="${export.tree.srcdir}/label.properties" />
		<property file="${basedir}/exp/labelNames.properties" />
		<propertycopy property="export.label.name" from="label.${export.label}.name" />
		<propertycopy property="export.cutoff" from="label.${export.label}.param1" />
		<propertycopy property="export.param2.list" from="label.${export.label}.param2" silent="yes" />
		<echo>export.param2.list ${export.param2.list}</echo>
		<echo>export.cutoff ${export.cutoff}</echo>
		<echo>export.label.name ${export.label.name}</echo>
		<property name="label.tree" value="tree_${export.cutoff}" />
		<filterset id="export.filterset">
			<filter token="kernel.experiment" value="${kernel.experiment}" />
			<filter token="export.label" value="${export.label}" />
			<filter token="export.cutoff" value="${export.cutoff}" />
			<filter token="export.label.name" value="${export.label.name}" />
		</filterset>
	</target>
	<target name="kernel.tree.label" depends="kernel.init.label" description="export the tree for the given label">
		<mkdir dir="${export.tree.outdir}" />
		<copy file="${export.tree.srcdir}/tree.xml" tofile="${export.tree.outdir}/${label.tree}.xml" overwrite="yes">
			<filterset>
				<filterset refid="export.filterset" />
			</filterset>
		</copy>
		<java classname="ytex.KernelLauncher" fork="yes" classpathref="${kernel.cp}" dir="${export.tree.outdir}">
			<arg line="-beans ${label.tree}.xml -storeInstanceMap ${label.tree}.obj" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="kernel.iter.eval.label" depends="kernel.init.label" description="call kernel.iter.param2 with kernel.eval.label as target">
		<antcall target="kernel.iter.param2">
			<param name="kernel.param2.target" value="kernel.eval.label"/>
		</antcall>
	</target>
	<target name="kernel.iter.export.label" depends="kernel.init.label" description="call kernel.iter.param2 with kernel.export.label as target">
		<antcall target="kernel.iter.param2">
			<param name="kernel.param2.target" value="kernel.export.label"/>
		</antcall>
	</target>	
	<target name="kernel.iter.param2" depends="kernel.init.label" description="iterate over export.param2.list, call kernel.param2.target">
		<if>
			<isset property="export.param2.list" />
			<then>
				<for list="${export.param2.list}" param="export.param2">
					<sequential>
						<echo>export.param2  @{export.param2}</echo>
						<antcall target="${kernel.param2.target}">
							<param name="export.param2.suffix" value="_@{export.param2}" />
							<param name="export.param2" value="@{export.param2}" />
						</antcall>
					</sequential>
				</for>
			</then>
			<else>
				<echo>export.param2.list not set</echo>
				<antcall target="${kernel.param2.target}" />
			</else>
		</if>
	</target>
	<target name="kernel.eval.label" depends="kernel.init.label" description="evaluate kernel on instance tree map">
		<property name="export.param2.suffix" value="" />
		<property name="export.param2" value="" />
		<property name="kernel.xml" value="${kernel.experiment}_${export.cutoff}${export.param2.suffix}.xml" />
		<copy file="exp/${kernel.experiment}/${kernel.experiment}.xml" tofile="${export.tree.outdir}/${kernel.xml}" overwrite="yes">
			<filterset>
				<filterset refid="export.filterset" />
				<filter token="export.param2" value="${export.param2}" />
			</filterset>
		</copy>
		<antcall target="kernel.eval.label.local" />
		<antcall target="kernel.eval.label.cluster" />
	</target>
	<target name="kernel.eval.label.local" unless="kernel.cluster" description="launch multiple processes to evaluate kernel">
		<for list="${kernel.slices}" param="kernel.slice" parallel="yes" threadCount="${kernel.mod}">
			<sequential>
				<antcall target="kernel.eval.slice">
					<param name="kernel.slice" value="@{kernel.slice}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="kernel.eval.label.cluster" if="kernel.cluster" description="send slices to slaves for processing">
		<!-- pass the properties to the slave that aren't in ytex.properties -->
		<exec executable="qsub">
			<arg line="-sync y -t 1-${kernel.mod} ${i2b2ant.pbs} kernel.eval.slice.cluster -Dexport.tree.outdir=${export.tree.outdir} -Dlabel.tree=${label.tree} -Dkernel.xml=${kernel.xml}" />
		</exec>
	</target>
	<target name="kernel.eval.slice.cluster" if="kernel.cluster" description="eval slice on cluster slave">
		<property name="kernel.slice" value="${env.SGE_TASK_ID}" />
		<property file="${export.tree.outdir}/kernel.properties" />
		<echo>kernel.slice ${kernel.slice}</echo>
		<antcall target="kernel.eval.slice" />
	</target>
	<target name="kernel.eval.slice" description="eval slice">
		<echo>kernel.xml ${kernel.xml}</echo>
		<echo>kernel.slice ${kernel.slice}</echo>
		<java classname="ytex.KernelLauncher" dir="${export.tree.outdir}" fork="yes" classpathref="${kernel.cp}">
			<arg line="-beans ${kernel.xml} -evalKernel -loadInstanceMap ${label.tree}.obj -mod ${kernel.mod} -slice ${kernel.slice}" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="kernel.export.label" depends="kernel.init.label" description="export libsvm gram matrix for specified label">
		<property name="export.param2.suffix" value="" />
		<property name="export.param2" value="" />
		<property name="export.dir" value="${export.libsvm.outdir}/${export.cutoff}${export.param2.suffix}" />
		<property name="export.xml" value="export_${export.label}.xml" />
		<echo>export.dir/export.xml ${export.dir}/${export.xml}</echo>
		<mkdir dir="${export.dir}" />
		<copy file="${export.tree.srcdir}/export.xml" tofile="${export.dir}/${export.xml}" overwrite="yes">
			<filterset>
				<filterset refid="export.filterset" />
				<filter token="export.param2" value="${export.param2}" />
			</filterset>
		</copy>
		<copy file="exp/${kernel.experiment}/kernel.properties.template" tofile="${export.dir}/kernel.properties" overwrite="yes">
			<filterset>
				<filterset refid="export.filterset" />
				<filter token="export.param2" value="${export.param2}" />
			</filterset>
		</copy>
		<java classname="ytex.libsvm.LibSVMGramMatrixExporterImpl" classpathref="${kernel.cp}" fork="yes" dir="${export.dir}">
			<arg value="-prop" />
			<arg value="${export.xml}" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>

	<!--
	for some reason this isn't working on linux
	can't overide experiment/libsvm.data with ant task
	-->
	<target name="bocuis.libsvm.cutoff" description="run libsvm for specified cutoff">
		<property name="export.cutoff" value="0.03test" />
		<ant antfile="build.xml" dir="../ytex.kernel/libsvm" target="cv.all.folds.local" inheritall="true">
			<!-- for testing 
			<property name="libsvm.classLabels" value="1"/>
			-->
			<property name="ytex.home" value="../.." />
			<property name="experiment" value="bocuis${export.cutoff}" />
			<property name="libsvm.data" value="../../i2b2.2008/libsvm/bocuis/${export.cutoff}" />
		</ant>
	</target>
	<target name="SparseDataExporter" description="run the SparseDataExporter from export.dir, property file export.prop, type export.type">
		<property name="export.prop" value="export-bow.xml" />
		<java classname="ytex.kernel.SparseDataExporterImpl" fork="yes" classpathref="${kernel.cp}" dir="${export.dir}">
			<arg value="-prop" />
			<arg value="${export.prop}" />
			<arg value="-type" />
			<arg value="${export.type}" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="mysql" description="run specified script">
		<exec executable="${mysql.home}/mysql" dir="${mysql.dir}" failonerror="yes">
			<arg line="${mysql.line}" />
			<arg value="-e" />
			<arg value="source ${mysql.script}" />
		</exec>
	</target>

	<target name="export.R">
		<property name="export.cutoff" value="0.07" />
		<property name="experiment.base" value="trvkern" />
		<property name="experiment" value="${experiment.base}${export.cutoff}" />
		<property name="export.dir" value="R/data/${experiment}" />
		<mkdir dir="${export.dir}" />
		<copy file="R/export.xml" todir="${export.dir}" overwrite="yes">
			<filterset>
				<filter token="experiment" value="${experiment}" />
				<filter token="export.cutoff" value="${export.cutoff}" />
			</filterset>
		</copy>
		<java classname="ytex.R.RGramMatrixExporterImpl" classpathref="i2b2.cp" fork="yes" dir="${export.dir}">
			<arg value="export.xml" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="eval.R">
		<property name="export.cutoff" value="0.07" />
		<property name="experiment.base" value="trvkern" />
		<property name="experiment" value="${experiment.base}${export.cutoff}" />
		<property name="eval.R" value="./R/eval.R" />
		<exec executable="${R.exe}" dir="./R" input="${eval.R}">
			<arg value="--no-restore" />
			<arg value="--no-save" />
			<arg value="--no-readline" />
			<arg value="${experiment}" />
		</exec>
	</target>
	<target name="test">
		<xmlproperty file="test2.xml" />
		<echoproperties prefix="job_info" />
		<echo>${job_info.queue_info.job_list.JB_job_number}</echo>
	</target>
</project>
