<project name="build-setup" default="help">
	<description>
		<![CDATA[
Setup ytex

Main target is 'all', which does the following:
  * setup.lvg download and unpack the lvg to the appropriate directory
  * templateToConfig generates configuration files from templates. 
  * setupDatabase call data/build.xml to setup the database.

You *must* define the ytex.home variable for this script using the -D option:
ant -Dytex.home=c:\java\clinicalnlp\ytex -file build-setup.xml

Prior to executing this script, download lvg2008lite.tgz and ctakes-2.5.0.zip; 
if we can't find these files, we will attempt to download them.

To use this in a 'real' environment, you will need an installation of UMLS,
or you can download a UMLS database dump we've provided.

To set up a development environment using a preexisting database, 
execute setup.lvg and templateToConfig
	]]>
	</description>
	<!-- override these variables using eclipse settings/command line -->
	<property name="ytex.home" value=".." />
	<import file="${ytex.home}/libs.system/build-classpath.xml" />
	<property name="download.dir" value="${ytex.home}/.." />
	<property name="lvg.basename" value="2008" />
	<property name="lvg.filename" value="lvg${lvg.basename}lite.tgz" />
	<property name="lvg.tgz" value="${download.dir}/${lvg.filename}" />
	<property name="context.root" value="ytex.web" />
	<property name="catalina.base" value="${ytex.home}/web" />
	<property name="ctakes.version" value="2.5.0" />
	<property name="ctakes.filename" value="cTAKES-${ctakes.version}.zip" />
	<property name="ctakes.url" value="http://downloads.sourceforge.net/project/ohnlp/cTAKES/v2.5/cTAKES-2.5.0.zip" />
	<target name="help">
		<echo>
Ant build script to setup ytex.
Call with option -projecthelp for more info.
			${ctakes.url}
</echo>
	</target>

	<target name="all" depends="dbping,setup.ctakes,setup.lvg.all,templateToConfig,setupDatabase" description="calls dbping,setup.ctakes,setup.lvg.all,templateToConfig,setupDatabase" />
	<target name="dbping" description="verify db connection params">
		<ant dir="${ytex.home}/data" target="dbping" />
	</target>
	<target name="setupDatabase" description="setup ytex database tables">
		<ant dir="${ytex.home}/data" target="all" />
	</target>
	<target name="templateToConfig.init" description="setup variables for updating template">
		<condition property="filter.umls.catalog" value="" else="catalog=&quot;${umls.catalog}&quot;">
			<or>
				<!-- for mysql/oracle, no catalog - assume umls in same catalog -->
				<equals arg1="mysql" arg2="${db.type}" />
				<equals arg1="oracle" arg2="${db.type}" />
				<!-- if umls.catalog not set, assume in same catalog -->
				<not>
					<isset property="umls.catalog" />
				</not>
				<!-- if umls catalog same as db, don't bother -->
				<equals arg1="${umls.catalog}" arg2="${db.name}" />
			</or>
		</condition>
		<!-- default umls schema to ytex schema - this will only be set if umls.schema hasn't been defined -->
		<property name="umls.schema" value="${db.schema}" />
	</target>
	<target name="templateToConfig.updateConfig" depends="templateToConfig.init" description="update config files">
		<echo>config.local = ${config.local}</echo>
		<copy todir="${config.local}" overwrite="yes">
			<fileset dir="${ytex.home}/config/desc" includes="**/*.template.xml" />
			<globmapper from="*.template.xml" to="*.xml" />
			<filterset>
				<!-- with a filter set, the last token overrides previous tokens -->
				<filtersfile file="${ytex.properties}" />
				<filter token="umls.schema" value="${umls.schema}" />
				<filter token="filter.umls.catalog" value="${filter.umls.catalog}" />
			</filterset>
		</copy>
	</target>
	<target name="templateToConfig.updateExamples" depends="templateToConfig.init" description="update example config files">
		<copy todir="${ytex.home}" overwrite="yes">
			<fileset dir="${ytex.home}" includes="examples/**/*.template.xml" />
			<globmapper from="*.template.xml" to="*.xml" />
			<filterset>
				<filtersfile file="${ytex.properties}" />
			</filterset>
		</copy>
		<copy todir="${ytex.home}/config/desc" overwrite="yes">
			<fileset dir="${ytex.home}/config/desc" includes="**/*.template.properties" />
			<globmapper from="*.template.properties" to="*.properties" />
			<filterset>
				<filtersfile file="${ytex.properties}" />
			</filterset>
		</copy>
	</target>
	<target name="templateToConfig.fixUnix" depends="templateToConfig.init" description="fix crlf, make shell scripts executable">
		<fixcrlf srcDir="${ytex.home}" includes="**/*.sh" />
		<chmod perm="u+x">
			<fileset dir="${ytex.home}" includes="**/*.sh" />
		</chmod>
	</target>
	<target name="templateToConfig" depends="templateToConfig.init,templateToConfig.fixUnix,templateToConfig.updateExamples,templateToConfig.updateConfig" description="generate config files from templates using values specified in ytex.properties">
	</target>
	<target name="setup.ctakes" description="download and unpack ctakes" depends="setup.ctakes.download,setup.ctakes.unzip" />
	<target name="setup.ctakes.download" description="download ctakes">
		<if>
			<and>
				<not>
					<available file="${download.dir}/${ctakes.filename}" />
				</not>
				<not>
					<available file="${ctakes.home}/cTAKES.jar" />
				</not>
			</and>
			<then>
				<echo>Downloading ${ctakes.filename} to ${download.dir} from sourceforge.  This may take a while!</echo>
				<copy todir="${download.dir}" flatten="true" failonerror="false">
					<resources>
						<url url="${ctakes.url}" />
					</resources>
				</copy>
			</then>
		</if>
	</target>
	<target name="setup.ctakes.unzip">
		<if>
			<and>
				<available file="${download.dir}/${ctakes.filename}" />
				<not>
					<available file="${ctakes.home}/cTAKES.jar" />
				</not>
			</and>
			<then>
				<echo>unpacking ${ctakes.filename}</echo>
				<mkdir dir="${ctakes.home}" />
				<unzip src="${download.dir}/${ctakes.filename}" dest="${ctakes.home}" />
			</then>
		</if>
		<if>
			<not>
				<available file="${ctakes.home}/cTAKES.jar" />
			</not>
			<then>
				<echo>Warning: ctakes not installed in ${ctakes.home}, and ${download.dir}/${ctakes.filename} not found, and ${ctakes.filename} could not be downloaded.  YTEX NLP will not work.</echo>
			</then>
		</if>
	</target>
	<target name="setup.lvg.all" description="see if lvg setup required">
		<!-- don't bother if ctakes not there, or if lvg is already updated (greater than 800 MB), or if setup.lvg=no -->
		<if>
			<and>
				<available file="${ctakes.home}/cTAKES.jar" />
				<length file="${ctakes.home}/resources/lvgresources/lvg/data/HSqlDb/lvg${lvg.basename}.data" property="lvg.length" length="800000000" when="lt" />
				<not>
					<equals arg1="${setup.lvg}" arg2="no" />
				</not>
			</and>
			<then>
				<echo>perform lvg setup</echo>
				<antcall target="setup.lvg" />
			</then>
			<else>
				<echo>Skipping lvg setup because ctakes not available, or lvg already set up</echo>
			</else>
		</if>
	</target>
	<target name="setup.lvg" description="unpack lvg data directory to resources folder" depends="setup.lvg.download,setup.lvg.unzip" />
	<target name="setup.lvg.download" description="download lvglite from nlm">
		<if>
			<not>
				<available file="${lvg.tgz}" />
			</not>
			<then>
				<echo>Downloading ${lvg.filename} to ${download.dir} from nlm.  This may take a while!</echo>
				<copy todir="${download.dir}" flatten="true" failonerror="false">
					<resources>
						<url url="http://lexsrv3.nlm.nih.gov/LexSysGroup/Projects/lvg/${lvg.basename}/release/${lvg.filename}" />
					</resources>
				</copy>
			</then>
		</if>
	</target>
	<target name="setup.lvg.unzip">
		<if>
			<available file="${lvg.tgz}" />
			<then>
				<delete dir="${java.io.tmpdir}/lvg" quiet="yes" />
				<mkdir dir="${java.io.tmpdir}/lvg" />
				<echo>unpacking ${lvg.filename} to ${java.io.tmpdir}/lvg</echo>
				<untar src="${lvg.tgz}" compression="gzip" dest="${java.io.tmpdir}/lvg">
				</untar>
				<echo>copying HSqlDb to ${ctakes.home}/resources/lvgresources/lvg/data</echo>
				<copy todir="${ctakes.home}/resources/lvgresources/lvg/data/HSqlDb" overwrite="yes">
					<fileset dir="${java.io.tmpdir}/lvg/lvg${lvg.basename}lite/data/HSqlDB">
						<include name="**/*.*" />
						<exclude name="**/lvg.properties" />
					</fileset>
				</copy>
				<delete dir="${java.io.tmpdir}/lvg" />
			</then>
			<else>
				<echo>Warning: ${lvg.tgz} not found and could not be downloaded.  Stemming will use the incomplete default database</echo>
			</else>
		</if>
	</target>
</project>
