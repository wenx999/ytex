<project name="build-setup" default="help">
	<description>
		<![CDATA[
Setup ytex

Main target is 'all', which does the following:
  * setup.lvg download and unpack the lvg to the appropriate directory
  * templateToConfig generates configuration files from templates. 
  * setupDatabase call data/build.xml to setup the database.

You *must* define the ytex.home variable for this script using the -D option:
ant -Dytex.home=c:\java\clinicalnlp\ytex -file build-setup.xml

Prior to executing this script, download lvg2010lite.tgz; 
if we can't find this file, we will attempt to download it.

To use this in a 'real' environment, you will need an installation of UMLS,
or you can download a UMLS database dump we've provided.

To set up a development environment using a preexisting database, 
execute setup.lvg and templateToConfig
	]]>
	</description>
	<!-- override these variables using eclipse settings/command line -->
	<property name="ytex.home" value=".." />
	<include file="${ytex.home}/libs.system/build-classpath.xml" />
	<property name="lvg.download.dir" value="${ytex.home}/.." />
	<property name="lvg.basename" value="2011" />
	<property name="lvg.filename" value="lvg${lvg.basename}lite.tgz" />
	<property name="lvg.tgz" value="${lvg.download.dir}/${lvg.filename}" />
	<property name="context.root" value="ytex.web" />
	<property name="catalina.base" value="${ytex.home}/web" />

	<target name="help">
		<echo>
Ant build script to setup ytex.
Call with option -projecthelp for more info.
</echo>
	</target>

	<target name="all" depends="dbping,setup.lvg,templateToConfig,setupDatabase" description="calls dbping,setup.lvg,templateToConfig,setupDatabase" />
	<target name="dbping" description="verify db connection params">
		<ant dir="${ytex.home}/data" target="dbping" />
	</target>
	<target name="setupDatabase" description="setup ytex database tables">
		<ant dir="${ytex.home}/data" target="all" />
	</target>
	<target name="templateToConfig.init" description="setup variables for updating template">
		<condition property="filter.umls.catalog" value="" else="catalog=&quot;${umls.catalog}&quot;">
			<or>
				<!-- for mysql/oracle, no catalog - assume umls in same catalog -->
				<equals arg1="mysql" arg2="${db.type}" />
				<equals arg1="oracle" arg2="${db.type}" />
				<!-- if umls.catalog not set, assume in same catalog -->
				<not>
					<isset property="umls.catalog" />
				</not>
				<!-- if umls catalog same as db, don't bother -->
				<equals arg1="${umls.catalog}" arg2="${db.name}" />
			</or>
		</condition>
		<!-- default umls schema to ytex schema - this will only be set if umls.schema hasn't been defined -->
		<property name="umls.schema" value="${db.schema}" />
	</target>
	<target name="templateToConfig.updateConfig" depends="templateToConfig.init" description="update config files">
		<echo>config.local = ${config.local}</echo>
		<copy todir="${config.local}" overwrite="yes">
			<fileset dir="${ytex.home}/config/desc" includes="**/*.template.xml" />
			<globmapper from="*.template.xml" to="*.xml" />
			<filterset>
				<!-- with a filter set, the last token overrides previous tokens -->
				<filtersfile file="${ytex.properties}" />
				<filter token="umls.schema" value="${umls.schema}" />
				<filter token="filter.umls.catalog" value="${filter.umls.catalog}" />
			</filterset>
		</copy>
	</target>
	<target name="templateToConfig.updateExamples" depends="templateToConfig.init" description="update example config files">
		<copy todir="${ytex.home}" overwrite="yes">
			<fileset dir="${ytex.home}" includes="examples/**/*.template.xml" />
			<globmapper from="*.template.xml" to="*.xml" />
			<filterset>
				<filtersfile file="${ytex.properties}" />
			</filterset>
		</copy>
		<copy todir="${ytex.home}/config/desc" overwrite="yes">
			<fileset dir="${ytex.home}/config/desc" includes="**/*.template.properties" />
			<globmapper from="*.template.properties" to="*.properties" />
			<filterset>
				<filtersfile file="${ytex.properties}" />
			</filterset>
		</copy>
	</target>
	<target name="templateToConfig.fixUnix" depends="templateToConfig.init" description="fix crlf, make shell scripts executable">
		<fixcrlf srcDir="${ytex.home}" includes="**/*.sh" />
		<chmod perm="u+x">
			<fileset dir="${ytex.home}" includes="**/*.sh" />
		</chmod>
	</target>
	<target name="templateToConfig" depends="templateToConfig.init,templateToConfig.fixUnix,templateToConfig.updateExamples,templateToConfig.updateConfig" description="generate config files from templates using values specified in ytex.properties">
	</target>
	<target name="setup.lvg" description="unpack lvg data directory to resources folder" depends="setup.lvg.download,setup.lvg.unzip" />
	<target name="setup.lvg.download" description="download lvg2010lite.tgz from nlm">
		<if>
			<not>
				<available file="${lvg.tgz}" />
			</not>
			<then>
				<echo>Downloading ${lvg.filename} to ${lvg.download.dir} from nlm.  This may take a while!</echo>
				<copy todir="${lvg.download.dir}" flatten="true" failonerror="false">
					<resources>
						<url url="http://lexsrv3.nlm.nih.gov/LexSysGroup/Projects/lvg/${lvg.basename}/release/${lvg.filename}" />
					</resources>
				</copy>
			</then>
		</if>
	</target>
	<target name="setup.lvg.unzip">
		<if>
			<available file="${lvg.tgz}" />
			<then>
				<untar src="${lvg.tgz}" compression="gzip" dest="${ytex.home}/maveric/resources/lvg">
					<patternset>
						<include name="${lvg.basename}/data/**/*.*" />
						<exclude name="${lvg.basename}/data/**/lvg.properties" />
					</patternset>
				</untar>
				<move file="${ytex.home}/maveric/resources/lvg/${lvg.basename}/data" todir="${ytex.home}/maveric/resources/lvg" />
				<delete dir="${ytex.home}/maveric/resources/lvg/${lvg.basename}" />
			</then>
			<else>
				<echo>${lvg.tgz} not found and could not be downloaded.  Stemming will not be enabled</echo>
			</else>
		</if>
	</target>
	<target name="update.manifest" description="update the manifest">
		<manifestclasspath property="ytex.classpath.man" jarfile="${ytex.home}/lib/ytex.model.jar">
			<classpath>
				<fileset dir="${catalina.base}/webapps/${context.root}/WEB-INF/lib" includes="*.jar" />
				<fileset dir="${ytex.home}/lib/mysql-connector-java-5.1.9" includes="**/*.jar" />
				<fileset dir="${ytex.home}/lib/oracle11.2.0.1.0" includes="**/*.jar" />
				<fileset dir="${ytex.home}/lib/sqljdbc_3.0" includes="**/*.jar" />
			</classpath>
		</manifestclasspath>
		<manifest file="${ytex.home}/lib/MANIFEST.MF">
			<attribute name="Class-Path" value="${ytex.classpath.man}" />
		</manifest>
		<zip destfile="${ytex.home}/lib/ytex.model.jar" update="yes">
			<zipfileset dir="${ytex.home}/lib" includes="MANIFEST.MF" prefix="META-INF" />
		</zip>
	</target>
</project>
