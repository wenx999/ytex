<project name="ytex.data.mssql">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<property environment="env"/>
	<property name="ytex.home" value=".."/>
	<property name="ytex.properties" value="${ytex.home}/config/desc/ytex.properties" />
	<property file="${ytex.properties}" />
	<property name="sql.dir" value="./${db.type}" />
	<property name="sqlcmd.line" value="-d ${db.name} -E -S ${db.host} -v db_schema=${db.schema}" />
	<property name="mysql.line" value="--user=${db.username} --password=${db.password} --host=${db.host} ${db.schema}" />
	<property name="sqlplus.line" value="${db.username}/${db.password}@${db.name}" />
	<property name="umls.zip" value="${ytex.home}/../umls-${db.type}.zip"/>
	<property name="mysql.home" value="${env.MYSQL_HOME}"/>

	<target name="all" depends="umls.all,vacs.all" description="call umls.all and vacs.all" />
	<target name="init" description="initialize flags indicating which db is in use">
		<condition property="mysql">
			<equals arg1="${db.type}" arg2="mysql" />
		</condition>
		<condition property="mssql">
			<equals arg1="${db.type}" arg2="mssql" />
		</condition>
		<condition property="orcl">
			<equals arg1="${db.type}" arg2="orcl" />
		</condition>
		<available file="${umls.zip}" property="umls.zip.available"/>
	</target>

	<target name="sqlcmd.orcl" if="orcl" description="execute sql script for oracle server">
		<echo>executing ${sqlcmd.dir}/${sqlcmd.script}</echo>
		<!-- append quit to end of file -->
		<copy file="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}" tofile="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}.tmp" overwrite="yes"/>
		<echo file="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}.tmp" append="yes">
quit</echo>
		<exec executable="sqlplus" dir="${sql.dir}/${sqlcmd.dir}">
			<arg line="${sqlplus.line} @${sqlcmd.script}.tmp" />
		</exec>
		<delete file="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}.tmp"/>
	</target>
	<target name="sqlcmd.mssql" if="mssql" description="execute sql script for ms sql server">
		<echo>executing ${sqlcmd.dir}/${sqlcmd.script}</echo>
		<exec executable="sqlcmd" dir="${sql.dir}/${sqlcmd.dir}">
			<arg line="${sqlcmd.line} -i ${sqlcmd.script}" />
		</exec>
	</target>
	<target name="sqlcmd.mysql" if="mysql" description="execute sql script for mysql">
		<echo>executing ${sqlcmd.dir}/${sqlcmd.script}</echo>
		<exec executable="${mysql.home}/mysql" dir="${sql.dir}/${sqlcmd.dir}">
			<arg line="${mysql.line} -e &quot;source ${sqlcmd.script}&quot;" />
		</exec>
	</target>

	<target name="sqlcmd" depends="init,sqlcmd.mysql,sqlcmd.mssql,sqlcmd.orcl" />

	<target name="unpack.umls.sample" unless="umls.zip.available">
		<echo>${umls.zip} not available, loading umls sample</echo>
		<copy todir="${db.type}/umls">
			<fileset dir="${db.type}/umls" includes="*.bcp"/>
			<mapper type="glob" from="*_sample.bcp" to="*.bcp"/>
		</copy>
		<copy todir="${db.type}/umls">
			<fileset dir="${db.type}/umls" includes="*.txt"/>
			<mapper type="glob" from="*_sample.txt" to="*.txt"/>
		</copy>
	</target>
	<target name="unpack.umls.zip" if="umls.zip.available">
		<unzip src="${umls.zip}" dest="${db.type}/umls"/>
	</target>
	<target name="unpack.umls" depends="init,unpack.umls.sample,unpack.umls.zip" description="unpack umls from archive, or load umls using just sample"/>

	<target name="umls.import.mssql" if="mssql">
		<echo>import umls tables</echo>
		<exec executable="bcp" dir="${sql.dir}/umls">
			<arg line="${db.name}.${db.schema}.umls_snomed_map in umls_snomed_map.bcp -T -S ${db.host} -w" />
		</exec>
		<exec executable="bcp" dir="${sql.dir}/umls">
			<arg line="${db.name}.${db.schema}.umls_ms_2009 in umls_ms_2009.bcp -T -S ${db.host} -w" />
		</exec>
	</target>
	<target name="umls.import.orcl" if="orcl">
		<echo>import umls tables</echo>
		<exec executable="sqlldr" dir="${sql.dir}/umls">
			<arg line="${sqlplus.line} control=umls_ms_2009.ctl" />
		</exec>
		<exec executable="sqlldr" dir="${sql.dir}/umls">
			<arg line="${sqlplus.line} control=umls_snomed_map.ctl" />
		</exec>
	</target>
	<target name="umls.all" description="setup UMLS tables" depends="init,unpack.umls">
		<echo>drop umls tables</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="drop_tables.sql" />
		</antcall>
		<echo>create umls tables</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="create_tables.sql" />
		</antcall>
		<!-- import umls tables for oracle and mssql.  import for mysql in create_tables.sql --> 
		<antcall target="umls.import.orcl"/>
		<antcall target="umls.import.mssql"/>
		<echo>index umls tables</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="create_indices.sql" />
		</antcall>
	</target>

	<!--
	<target name="drop.abstraction">
		<input message="dropping abstraction form tables!!!! are you really sure???" />
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="esld" />
			<param name="sqlcmd.script" value="drop_abstraction.sql" />
		</antcall>
	</target>
	<target name="create.abstraction">
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="esld" />
			<param name="sqlcmd.script" value="create_abstraction.sql" />
		</antcall>
	</target>
	-->
	<!-- uima script targets -->
	<target name="uima.all" description="drop and create ytex uima tables" depends="uima.drop,uima.create" />
	<target name="uima.drop" description="drop ytex uima tables">
		<for list="drop_view.sql,drop_document.sql,drop_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="uima" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="uima.create" description="create ytex uima tables">
		<for list="create_reference.sql,create_document.sql,create_view.sql,insert_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="uima" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="vacs.drop" description="drop ytex vacs tables">
		<for list="drop_view.sql,drop_reference.sql,drop_document.sql,delete_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="vacs" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="vacs.create" description="create ytex vacs tables">
		<for list="create_reference.sql,create_document.sql,create_view.sql,insert_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="vacs" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="vacs.all" description="drop and create ytex vacs, ctakes, and uima tables" depends="kernel.drop,vacs.drop,uima.all,vacs.create,kernel.create" />

	<target name="esld.all" description="create esld views, add esld terms">
		<for list="create_document.sql,create_view.sql,insert_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="esld" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="kernel.drop" description="create tables for data mining">
		<for list="drop_view.sql,drop_table.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="kernel" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="kernel.create" description="create tables for data mining">
		<for list="create_table.sql,create_view.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="kernel" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
</project>