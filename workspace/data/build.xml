<!--
-->
<project name="ytex.data">

	<description>
		<![CDATA[

This buildfile sets up the ytex database.
== all ==
sets up all ytex tables, calls following targets:
  * umls.all
  * uima.all

== umls.all ==
setup umls_aui_fword and v_snomed_fword_lookup table and view.  
check if mrconso table exists and import umls tables if required.
If the umls database tables exist, then setup the umls_aui_fword table
from the database.  If yes, execute umls.setup.db to setup umls_aui_fword 
from db. If no, execute umls.setup.dump to create and import umls tables
from dump files.  We look for a umls.zip file in the directory
that contains ytex.  If it exists, we load the umls tables from that file.
If not, we load the sample umls tables included in the ytex distro

== uima.all ==
setup all ytex database tables.  All existing ytex tables
will be dropped first.
		
== configuration ==
Database connection parameters are taken from ytex.properties.
	]]>
	</description>
	<property name="ytex.home" value=".." />
	<include file="${ytex.home}/libs.system/build-classpath.xml" />

	<!-- by default umls in same database/catalog as ytex -->
	<property name="umls.catalog" value="${db.name}" />
	<property name="umls.schema" value="${db.schema}" />
	<property name="sql.dir" value="./${db.type}" />
	<property name="umls.zip" value="${ytex.home}/../umls.zip" />
	<property name="meta.tables" value="MRDOC,MRSAB,MRSTY,MRCONSO,MRREL,MRXNS_ENG,MRXNW_ENG" />
	<!-- SU is in a different format -->
	<property name="net.tables" value="SRDEF,SRFIL,SRFLD,SRSTR,SRSTRE1,SRSTRE2" />
	<property name="sct.home" value="E:/temp/SnomedCT_RF2Release_INT_20110731/Snapshot/Terminology" />
	<property name="sctf.home" value="E:/temp/SnomedCT_RF2Release_INT_20110731/Full/Terminology" />
	<property name="sct.version" value="20110731" />


	<target name="all" depends="umls.all,uima.all" description="call umls.all and uima.all" />
	<target name="init" description="initialize flags indicating which db is in use">
		<condition property="mysql">
			<equals arg1="${db.type}" arg2="mysql" />
		</condition>
		<condition property="mssql">
			<equals arg1="${db.type}" arg2="mssql" />
		</condition>
		<condition property="orcl">
			<equals arg1="${db.type}" arg2="orcl" />
		</condition>
		<available file="${umls.zip}" property="umls.zip.available" />
		<condition property="umls.data" value="${java.io.tmpdir}" else="${basedir}">
			<isset property="umls.zip.available" />
		</condition>
	</target>
	<target name="test" depends="init">
		<echo>umls.zip.available ${umls.zip.available}</echo>
		<echo>db.schema ${db.schema}</echo>
		<echo>db.type ${db.type}</echo>
	</target>
	<target name="dbping" description="verify db connection params">
		<java classname="ytex.tools.DBPing" fork="yes" classpathref="${kernel.cp}" failonerror="yes">
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
			<arg value="${ytex.properties}" />
		</java>
	</target>

	<target name="umls.check.mrconso" description="set mrconso.exists property if mrconso table can be found">
		<delete file="${java.io.tmpdir}/mrconso-check.txt" quiet="yes" />
		<if>
			<equals arg1="${db.type}" arg2="mysql" />
			<then>
				<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" classpathref="${kernel.cp}" output="${java.io.tmpdir}/mrconso-check.txt" print="true" showheaders="false" showtrailers="false">show tables from ${umls.schema} like 'MRCONSO';</sql>
			</then>
		</if>
		<if>
			<equals arg1="${db.type}" arg2="mssql" />
			<then>
				<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" classpathref="${kernel.cp}" output="${java.io.tmpdir}/mrconso-check.txt" print="true" showheaders="false" showtrailers="false">use ${umls.catalog}; SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'${umls.schema}.[MRCONSO]');</sql>
			</then>
		</if>
		<if>
			<equals arg1="${db.type}" arg2="orcl" />
			<then>
				<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" classpathref="${kernel.cp}" output="${java.io.tmpdir}/mrconso-check.txt" print="true" showheaders="false" showtrailers="false">select count(*) from all_tables where lower(table_name) = 'mrconso' and lower(owner) = lower('${umls.schema}');</sql>
			</then>
		</if>
		<loadfile srcFile="${java.io.tmpdir}/mrconso-check.txt" property="mrconso.out" />
		<delete file="${java.io.tmpdir}/mrconso-check.txt" />
		<condition property="mrconso.equals" value="mrconso" else="1">
			<equals arg1="mysql" arg2="${db.type}" />
		</condition>
		<condition property="mrconso.exists">
			<equals arg1="${mrconso.equals}" arg2="${mrconso.out}" casesensitive="false" trim="true" />
		</condition>
		<echo>mrconso.exists = ${mrconso.exists}</echo>
	</target>

	<target name="umls.all" depends="init,umls.mssql.setup,umls.check.mrconso" description="setup umls tables from dump or db, depending on existence of mrconso">
		<echo>mrconso.exists = ${mrconso.exists}</echo>
		<if>
			<isset property="mrconso.exists" />
			<then>
				<antcall target="umls.setup.db" />
			</then>
			<else>
				<antcall target="umls.setup.dump" />
			</else>
		</if>
	</target>
	<target name="umls.mssql.setup" depends="init,umls.check.mrconso" description="setup umls from RRF files for mssql">
		<!--
		perform import if mrconso table does not exist
		and this is ms sql server setup
		and rrf.home is set 
		-->
		<condition property="umls.mssql.import">
			<and>
				<isset property="mssql" />
				<isset property="rrf.home" />
				<not>
					<isset property="mrconso.exists" />
				</not>
			</and>
		</condition>
		<!-- abort if we can't find the RRF files -->
		<fail message="could not find ${rrf.home}/META/MRCONSO.RRF">
			<condition>
				<and>
					<isset property="umls.mssql.import" />
					<not>
						<available file="${rrf.home}/META/MRCONSO.RRF" />
					</not>
				</and>
			</condition>
		</fail>
		<!-- do the import if necessary -->
		<if>
			<isset property="umls.mssql.import" />
			<then>
				<antcall target="umls.mssql.import" />
			</then>
		</if>
		<!-- set the flag that says that mrconso table exists -->
		<property name="mrconso.exists" value="yes" />
	</target>
	<target name="umls.mssql.import" description="create mssql umls tables, import from RRF files" depends="init.conn">
		<echo>create umls tables</echo>
		<for list="mssql_drop.sql,mssql_tables.sql,mssql_net_tables.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="jdbc.sqlcmd">
					<param name="sqlcmd.dir" value="umls" />
					<param name="db.name" value="${umls.catalog}" />
					<param name="db.schema" value="${umls.schema}" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
		<echo>import umls tables</echo>
		<for list="${meta.tables}" param="rrf.base">
			<sequential>
				<antcall target="jdl">
					<param name="jdl.data" value="${rrf.home}/META/@{rrf.base}.RRF" />
					<param name="jdl.format" value="${basedir}/umls/@{rrf.base}.xml" />
				</antcall>
			</sequential>
		</for>
		<for list="${net.tables}" param="rrf.base">
			<sequential>
				<antcall target="jdl">
					<param name="jdl.data" value="${rrf.home}/NET/@{rrf.base}" />
					<param name="jdl.format" value="${basedir}/umls/@{rrf.base}.xml" />
				</antcall>
			</sequential>
		</for>
		<echo>index umls tables</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="umls" />
			<param name="db.name" value="${umls.catalog}" />
			<param name="db.schema" value="${umls.schema}" />
			<param name="sqlcmd.script" value="mssql_indexes.sql" />
		</antcall>
	</target>
	<target name="umls.import.meta" description="create and import MRCONSO and MRSTY tables" depends="init.conn">
		<echo>create umls tables</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="umls" />
			<param name="sqlcmd.script" value="import_umls.sql" />
		</antcall>
		<echo>import MRCONSO</echo>
		<antcall target="jdl">
			<param name="jdl.data" value="${umls.data}/MRCONSO.RRF" />
			<param name="jdl.format" value="${basedir}/umls/MRCONSO.xml" />
		</antcall>
		<echo>import MRSTY</echo>
		<antcall target="jdl">
			<param name="jdl.data" value="${umls.data}/MRSTY.RRF" />
			<param name="jdl.format" value="${basedir}/umls/MRSTY.xml" />
		</antcall>
		<echo>index umls tables</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="index_umls.sql" />
		</antcall>
	</target>
	<target name="umls.setup.dump" depends="umls.init,umls.unpack,umls.import.meta,umls.import.auiFword,umls.cleanup,umls.finish" unless="mrconso.exists" description="unpack umls_aui_fword and mrconso from dump, and setup ctakes umls lookup view" />
	<target name="umls.setup.db" depends="umls.init,umls.setupAuiFword,umls.finish" if="mrconso.exists" description="setup umls_aui_fword from mrconso in db, and setup ctakes umls lookup view" />
	<target name="umls.setupAuiFword" depends="init" description="setup umls_aui_fword from mrconso">
		<echo>setting up umls_aui_fword table. please be patient - this can take a while</echo>
		<java classname="ytex.tools.SetupAuiFirstWord" fork="yes" classpathref="${kernel.cp}" failonerror="yes">
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="umls.unpack" if="umls.zip.available" description="unpack umls from archive">
		<unzip src="${umls.zip}" dest="${java.io.tmpdir}" />
	</target>
	<target name="umls.cleanup" if="umls.zip.available" description="delete unpacked umls files">
		<delete quiet="yes">
			<fileset dir="${java.io.tmpdir}" includes="MRREL.RRF,MRCONSO.RRF,MRSTY.RRF,umls_aui_fword.txt" />
		</delete>
	</target>
	<target name="umls.import.auiFword" depends="init.conn">
		<echo>import umls tables into ${umls.schema} schema.  Be patient, this can take a while.</echo>
		<antcall target="jdl">
			<param name="jdl.data" value="${umls.data}/umls_aui_fword.txt" />
			<param name="jdl.format" value="umls_aui_fword.xml" />
		</antcall>
	</target>
	<target name="umls.init" description="drop and create umls tables">
		<fail message="when importing umls from dump, you must use the same database and schema as ytex tables: unset umls.schema and db.schema in ytex.properties">
			<condition>
				<and>
					<not>
						<isset property="mrconso.exists" />
					</not>
					<or>
						<not>
							<equals arg1="${umls.schema}" arg2="${db.schema}" casesensitive="false" />
						</not>
						<and>
							<equals arg1="${db.type}" arg2="${mssql}" casesensitive="false" />
							<not>
								<equals arg1="${umls.catalog}" arg2="${db.name}" casesensitive="false" />
							</not>
						</and>
					</or>
				</and>
			</condition>
		</fail>
		<condition property="drop.sql.onerror" value="continue" else="abort">
			<equals arg1="${db.type}" arg2="orcl" />
		</condition>
		<echo>drop umls views</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="drop_view.sql" />
			<param name="sql.onerror" value="${drop.sql.onerror}" />
		</antcall>
		<echo>drop ytex umls tables</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="drop_tables.sql" />
			<param name="sql.onerror" value="${drop.sql.onerror}" />
		</antcall>
		<echo>create ytex umls tables</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="create_tables.sql" />
		</antcall>
	</target>
	<target name="umls.create" description="create mrconso table">
		<echo>create nlm's umls tables</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="umls.sql" />
		</antcall>
	</target>
	<target name="umls.finish.template" description="generate create_view.sql for oracle/mysql" unless="mssql">
		<copy file="${sql.dir}/umls/create_view.template.sql" tofile="${sql.dir}/umls/create_view.sql" overwrite="yes">
			<filterset>
				<filter token="UMLS_SCHEMA" value="${umls.schema}" />
			</filterset>
		</copy>
	</target>
	<target name="umls.finish" depends="umls.finish.template" description="index umls tables, create lookup view">
		<echo>index umls tables</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="create_indices.sql" />
		</antcall>
		<echo>create lookup view</echo>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="create_view.sql" />
		</antcall>
	</target>
	<!-- uima script targets -->
	<target name="jdbc.sqlcmd">
		<property name="sql.onerror" value="abort" />
		<property name="sql.delimiter" value=";" />
		<property name="sql.catalog" value="${db.name}" />
		<property name="sql.schema" value="${db.schema}" />
		<property name="sql.file" value="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}" />
		<property name="sql.src" value="${java.io.tmpdir}/${sqlcmd.script}" />
		<if>
			<equals arg1="${db.type}" arg2="mssql" />
			<then>
				<echo file="${java.io.tmpdir}/use.sql">
use ${sql.catalog}
${sql.delimiter}					
</echo>
				<copy file="${sql.file}" tofile="${sql.src}" overwrite="true">
					<!-- for mssql replace db_schema and go -->
					<filterset begintoken="$(" endtoken=")">
						<filter token="db_schema" value="${db.schema}" />
						<filter token="umls_catalog" value="${umls.catalog}" />
						<filter token="umls_schema" value="${umls.schema}" />
					</filterset>
					<filterchain>
						<concatfilter prepend="${java.io.tmpdir}/use.sql" />
						<tokenfilter>
							<replaceregex pattern="\Ago\z" flags="gi" replace="" />
							<replaceregex pattern="\Wgo\W" flags="gi" replace="" />
						</tokenfilter>
					</filterchain>
				</copy>
			</then>
			<else>
				<if>
					<equals arg1="${db.type}" arg2="mysql" />
					<then>
						<echo file="${java.io.tmpdir}/use.sql">
use ${sql.schema}
${sql.delimiter}					
</echo>
					</then>
				</if>
				<if>
					<equals arg1="${db.type}" arg2="orcl" />
					<then>
						<echo file="${java.io.tmpdir}/use.sql">
ALTER SESSION SET CURRENT_SCHEMA=${sql.schema}
${sql.delimiter}					
</echo>
					</then>
				</if>
				<copy file="${sql.file}" tofile="${sql.src}" overwrite="true">
					<!-- for oracle and mysql use the correct schema -->
					<filterchain>
						<concatfilter prepend="${java.io.tmpdir}/use.sql" />
					</filterchain>
				</copy>
			</else>
		</if>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.username}" password="${db.password}" src="${sql.src}" onerror="${sql.onerror}" classpathref="${kernel.cp}" delimiter="${sql.delimiter}" />
		<delete file="${sql.src}" />
		<delete file="${java.io.tmpdir}/use.sql" />
	</target>
	<target name="jdl" description="load data with java data loader.  used instead of native database utilities.">
		<echo>jdl.format ${jdl.format}</echo>
		<echo>jdl.data ${jdl.data}</echo>
		<tempfile property="jdl.format.file" suffix=".xml" deleteonexit="true" />
		<condition property="umls.prefix" value="${umls.catalog}.${umls.schema}" else="${umls.schema}">
			<isset property="mssql" />
		</condition>
		<copy file="${jdl.format}" tofile="${jdl.format.file}" overwrite="true">
			<filterset>
				<filter token="umls.prefix" value="${umls.prefix}" />
				<filter token="db.schema" value="${db.schema}" />
			</filterset>
		</copy>
		<java classpathref="${kernel.cp}" classname="my.mas.AppMain" fork="yes" failonerror="yes">
			<jvmarg value="-Dfile.encoding=UTF-8" />
			<arg value="-c" />
			<arg value="conn.xml" />
			<arg value="-d" />
			<arg value="${jdl.data}" />
			<arg value="-l" />
			<arg value="${jdl.format.file}" />
		</java>
	</target>
	<target name="uima.all" description="drop and create ytex uima tables" depends="uima.drop,uima.create" />
	<target name="uima.drop" description="drop ytex uima tables">
		<!-- for oracle we don't check existence before dropping objects, so just continue in case of errors -->
		<condition property="sql.onerror" value="continue" else="abort">
			<equals arg1="${db.type}" arg2="orcl" />
		</condition>
		<for list="drop_view.sql,drop_document.sql,drop_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="jdbc.sqlcmd">
					<param name="sqlcmd.dir" value="uima" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="uima.create" depends="init" description="create ytex uima tables">
		<for list="create_reference.sql,create_document.sql,create_view.sql,insert_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="jdbc.sqlcmd">
					<param name="sqlcmd.dir" value="uima" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
		<antcall target="uima.create.trigger" />
		<antcall target="uima.examples.load" />
		<antcall target="uima.stopword.load" />
	</target>
	<target name="uima.create.trigger" if="orcl" description="create insert triggers for oracle">
		<for list="create_reference_trg.sql,create_document_trg.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="jdbc.sqlcmd">
					<param name="sqlcmd.dir" value="uima" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
					<param name="sql.delimiter" value="/" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="uima.stopword.load" depends="init,init.conn">
		<antcall target="jdl">
			<param name="jdl.data" value="stopword.txt" />
			<param name="jdl.format" value="stopword.xml" />
		</antcall>
	</target>
	<target name="uima.examples.load" depends="init,init.conn">
		<antcall target="jdl">
			<param name="jdl.data" value="examples/fracture_demo.txt" />
			<param name="jdl.format" value="examples/fracture_demo.xml" />
		</antcall>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="uima" />
			<param name="sqlcmd.script" value="fracture_demo.sql" />
		</antcall>
	</target>
	<target name="init.conn">
		<copy file="${basedir}/conn.xml.template" tofile="${basedir}/conn.xml" overwrite="yes">
			<filterset>
				<filter token="db.driver" value="${db.driver}" />
				<filter token="db.url" value="${db.url}" />
				<filter token="db.username" value="${db.username}" />
				<filter token="db.password" value="${db.password}" />
			</filterset>
		</copy>
	</target>
	<target name="kernel.drop" description="create tables for data mining">
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="kernel" />
			<param name="sqlcmd.script" value="drop_tables.sql" />
		</antcall>
	</target>
	<target name="kernel.create" description="create tables for data mining">
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="kernel" />
			<param name="sqlcmd.script" value="create_tables.sql" />
		</antcall>
	</target>
	<target name="sct.all" depends="sct.create,sct.load" description="import snomed-ct snapshot tables" />
	<target name="sctf.all" description="import snomed-ct full tables">
		<antcall target="sct.all">
			<param name="prefix" value="sct2f" />
			<param name="suffix" value="full" />
			<param name="sct.home" value="${sctf.home}" />
		</antcall>
	</target>
	<target name="sct.create" description="create snomed-ct tables">
		<property name="suffix" value="" />
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="snomedct" />
			<param name="sqlcmd.script" value="create_tables${suffix}.sql" />
		</antcall>
	</target>
	<target name="sct.load" depends="init.conn" description="load snomed-ct tables">
		<property name="suffix" value="" />
		<property name="prefix" value="sct2" />
		<antcall target="jdl">
			<param name="jdl.data" value="${sct.home}/${prefix}_Concept_Snapshot_INT_${sct.version}.txt" />
			<param name="jdl.format" value="${basedir}/snomedct/${prefix}_concept.xml" />
		</antcall>
		<antcall target="jdl">
			<param name="jdl.data" value="${sct.home}/${prefix}_Relationship_Snapshot_INT_${sct.version}.txt" />
			<param name="jdl.format" value="${basedir}/snomedct/${prefix}_relationship.xml" />
		</antcall>
		<antcall target="jdl">
			<param name="jdl.data" value="${sct.home}/${prefix}_Description_Snapshot-en_INT_${sct.version}.txt" />
			<param name="jdl.format" value="${basedir}/snomedct/${prefix}_description.xml" />
		</antcall>
		<antcall target="jdbc.sqlcmd">
			<param name="sqlcmd.dir" value="snomedct" />
			<param name="sqlcmd.script" value="index_tables${suffix}.sql" />
		</antcall>
	</target>
</project>