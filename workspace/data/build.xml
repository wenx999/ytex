<!--
-->
<project name="ytex.data">

	<description>
		<![CDATA[

This buildfile sets up the ytex database.
== all ==
sets up all ytex tables, calls following targets:
  * umls.all
  * uima.all

== umls.all ==
setup umls_aui_fword and v_snomed_fword_lookup table and view.  
check if mrconso table exists and import umls tables if required.
If the umls database tables exist, then setup the umls_aui_fword table
from the database.  If yes, execute umls.setup.db to setup umls_aui_fword 
from db. If no, execute umls.setup.dump to create and import umls tables
from dump files.  We look for a umls-[db.type].zip file in the directory
that contains ytex.  If it exists, we load the umls tables from that file.
If not, we load the sample umls tables included in the ytex distro

== vacs.all ==
setup all ytex database tables.  All existing ytex tables
will be dropped first.
		
== configuration ==
Database connection parameters are taken from ytex.properties.
  * mysql: For MySQL, you must define the MYSQL_HOME environment variable,
or specify the directory that contains mysql.exe via the -Dmysql.home option.
  * oracle: sqlldr must be in the path
  * sql server: sqlcmd and bcp must be in the path
These variables are set by setenv.cmd / ytex.profile script
	]]>
	</description>
	<property name="ytex.home" value=".." />
	<include file="${ytex.home}/libs.system/build-classpath.xml" />

	<!-- by default umls in same database/catalog as ytex -->
	<property name="umls.catalog" value="${db.name}" />
	<property name="umls.schema" value="${db.schema}" />
	<property name="sql.dir" value="./${db.type}" />
	<property name="sqlcmd.line" value="-d ${db.name} -E -S ${db.host} -v db_schema=${db.schema} -v umls_schema=${umls.schema} -v umls_catalog=${umls.catalog}" />
	<property name="mysql.line" value="--user=${db.username} --password=${db.password} --host=${db.host} ${db.schema}" />
	<property name="sqlplus.line" value="${db.username}/${db.password}@${db.name}" />
	<property name="umls.zip" value="${ytex.home}/../umls-${db.type}.zip" />
	<property name="mysql.home" value="${env.MYSQL_HOME}" />
	<property name="sqlplus.exe" value="sqlplus" />
	<property name="sqlldr.exe" value="sqlldr" />


	<target name="all" depends="umls.all,uima.all" description="call umls.all and uima.all" />
	<target name="init" description="initialize flags indicating which db is in use">
		<condition property="mysql">
			<equals arg1="${db.type}" arg2="mysql" />
		</condition>
		<condition property="mssql">
			<equals arg1="${db.type}" arg2="mssql" />
		</condition>
		<condition property="orcl">
			<equals arg1="${db.type}" arg2="orcl" />
		</condition>
		<available file="${umls.zip}" property="umls.zip.available" />
	</target>
	<target name="test" depends="init">
		<echo>umls.zip.available ${umls.zip.available}</echo>
		<echo>db.schema ${db.schema}</echo>
		<echo>db.type ${db.type}</echo>
	</target>

	<target name="sqlcmd.orcl" if="orcl" description="execute sql script for oracle server">
		<echo>executing ${sqlcmd.dir}/${sqlcmd.script}</echo>
		<property name="sqlplus.args" value="" />
		<!-- append quit to end of file -->
		<copy file="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}" tofile="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}.tmp" overwrite="yes" />
		<echo file="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}.tmp" append="yes">
quit</echo>
		<exec executable="${sqlplus.exe}" dir="${sql.dir}/${sqlcmd.dir}">
			<arg line="${sqlplus.line} @${sqlcmd.script}.tmp ${sqlplus.args}" />
		</exec>
		<delete file="${sql.dir}/${sqlcmd.dir}/${sqlcmd.script}.tmp" />
	</target>
	<target name="sqlcmd.mssql" if="mssql" description="execute sql script for ms sql server">
		<echo>executing ${sqlcmd.dir}/${sqlcmd.script}</echo>
		<exec executable="sqlcmd" dir="${sql.dir}/${sqlcmd.dir}">
			<arg line="${sqlcmd.line} -i ${sqlcmd.script}" />
		</exec>
	</target>
	<target name="sqlcmd.mysql" if="mysql" description="execute sql script for mysql">
		<echo>executing ${sqlcmd.dir}/${sqlcmd.script}</echo>
		<exec executable="${mysql.home}/mysql" dir="${sql.dir}/${sqlcmd.dir}">
			<arg line="${mysql.line} -e &quot;source ${sqlcmd.script}&quot;" />
		</exec>
	</target>

	<target name="sqlcmd" depends="init,sqlcmd.mysql,sqlcmd.mssql,sqlcmd.orcl" />

	<target name="umls.check.mrconso.mysql" if="mysql" description="see if mrconso table exists">
		<exec executable="${mysql.home}/mysql" outputproperty="mrconso.out">
			<arg line="${mysql.line} --skip-column-names --batch -e &quot;show tables from ${umls.schema} like 'MRCONSO'&quot;" />
		</exec>
		<condition property="mrconso.exists">
			<equals arg1="mrconso" arg2="${mrconso.out}" casesensitive="false" trim="true" />
		</condition>
		<echo>${mrconso.exists}</echo>
	</target>
	<target name="umls.check.mrconso.mssql" if="mssql" description="see if mrconso table exists">
		<exec executable="sqlcmd" outputproperty="mrconso.out">
			<arg line="-d ${umls.catalog} -E -S ${db.host} -h-1 -W -Q &quot;set nocount on; SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'${umls.schema}.[MRCONSO]')&quot;" />
		</exec>
		<condition property="mrconso.exists">
			<equals arg1="1" arg2="${mrconso.out}" casesensitive="false" trim="true" />
		</condition>
		<echo>${mrconso.exists}</echo>
	</target>
	<target name="umls.check.mrconso.orcl" if="orcl" description="see if mrconso table exists">
		<exec executable="${sqlplus.exe}" dir="${sql.dir}/umls">
			<arg line="${sqlplus.line} @check_mrconso.sql ${umls.schema}" />
		</exec>
		<loadfile srcFile="${sql.dir}/umls/mrconso-check.txt" property="mrconso.out" />
		<condition property="mrconso.exists">
			<equals arg1="1" arg2="${mrconso.out}" casesensitive="false" trim="true" />
		</condition>
		<echo>mrconso.exists: ${mrconso.exists}</echo>
	</target>
	<target name="umls.all" depends="init" description="setup umls tables from dump or db, depending on existence of mrconso">
		<!-- 
		somewhat convoluted: we need to call init so that we can set the database type flags (mysql, mssql, orcl)
		we then can call umls.setup, which can call all the targets to set mrconso.exists attribute
		which then controls which target gets called (dump/db)
		-->
		<antcall target="umls.setup" />
	</target>
	<target name="umls.setup" depends="umls.check.mrconso.mysql,umls.check.mrconso.orcl,umls.check.mrconso.mssql">
		<antcall target="umls.setup.dump" />
		<antcall target="umls.setup.db" />
	</target>
	<target name="umls.setup.dump" depends="init" unless="mrconso.exists" description="unpack umls_aui_fword and mrconso from dump, and setup ctakes umls lookup view">
		<antcall target="umls.init" />
		<antcall target="unpack.umls" />
		<antcall target="umls.import.mssql" />
		<antcall target="umls.import.mysql" />
		<antcall target="umls.import.orcl" />
		<antcall target="umls.finish" />
	</target>
	<target name="umls.setup.db" depends="init" if="mrconso.exists" description="setup umls_aui_fword from mrconso in db, and setup ctakes umls lookup view">
		<antcall target="umls.init" />
		<antcall target="umls.setupAuiFword" />
		<antcall target="umls.finish" />
	</target>
	<target name="umls.setupAuiFword" depends="init" description="setup umls_aui_fword from mrconso">
		<echo>setting up umls_aui_fword table. please be patient - this can take a while</echo>
		<java classname="ytex.tools.SetupAuiFirstWord" fork="yes" classpathref="${kernel.cp}" failonerror="yes">
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="unpack.umls.zip" if="umls.zip.available">
		<unzip src="${umls.zip}" dest="${db.type}/umls" />
	</target>
	<target name="unpack.umls" depends="init,unpack.umls.zip" description="unpack umls from archive" />

	<target name="umls.import.mssql" if="mssql">
		<echo>import umls tables into ${umls.schema} schema.  Be patient, this can take a while.</echo>
		<exec executable="sqlcmd" dir="mssql/umls">
			<arg line="-d ${umls.catalog} -E -S ${db.host} -v db_schema=${umls.schema} -i import_umls.sql" />
		</exec>
		<exec executable="bcp" dir="${sql.dir}/umls">
			<arg line="${umls.catalog}.${umls.schema}.MRCONSO in MRCONSO.bcp -T -S ${db.host} -n" />
		</exec>
		<exec executable="bcp" dir="${sql.dir}/umls">
			<arg line="${umls.catalog}.${umls.schema}.MRSTY in MRSTY.bcp -T -S ${db.host} -n" />
		</exec>
		<exec executable="bcp" dir="${sql.dir}/umls">
			<arg line="${db.name}.${db.schema}.umls_aui_fword in umls_aui_fword.bcp -T -S ${db.host} -n" />
		</exec>
	</target>
	<target name="umls.import.orcl" if="orcl">
		<echo>import umls tables into ${umls.schema} schema.  Be patient, this can take a while.</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="umls" />
			<param name="sqlcmd.script" value="import_umls.sql" />
		</antcall>
		<exec executable="${sqlldr.exe}" dir="${sql.dir}/umls" failonerror="yes">
			<arg line="${sqlplus.line} control=MRCONSO.ctl" />
		</exec>
		<exec executable="${sqlldr.exe}" dir="${sql.dir}/umls" failonerror="yes">
			<arg line="${sqlplus.line} control=MRSTY.ctl" />
		</exec>
		<exec executable="${sqlldr.exe}" dir="${sql.dir}/umls" failonerror="yes">
			<arg line="${sqlplus.line} control=umls_aui_fword.ctl" />
		</exec>
	</target>
	<target name="umls.import.mysql" if="mysql">
		<echo>import umls tables into ${umls.schema} schema.  Be patient, this can take a while</echo>
		<exec executable="${mysql.home}/mysql" dir="${sql.dir}/umls">
			<arg line="--user=${db.username} --password=${db.password} --host=${db.host} ${umls.schema} -e &quot;source import_umls.sql&quot;" />
		</exec>
		<echo>import umls_aui_fword table</echo>
		<exec executable="${mysql.home}/mysql" dir="${sql.dir}/umls">
			<arg line="${mysql.line} -e &quot;load data local infile 'umls_aui_fword.txt' into table umls_aui_fword&quot;" />
		</exec>
	</target>
	<target name="umls.init" description="drop and create umls tables">
		<echo>drop umls views</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="drop_view.sql" />
		</antcall>
		<echo>drop ytex umls tables</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="drop_tables.sql" />
		</antcall>
		<echo>create ytex umls tables</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="create_tables.sql" />
		</antcall>
	</target>
	<target name="umls.create" description="create mrconso table">
		<echo>create nlm's umls tables</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="umls.sql" />
		</antcall>
	</target>
	<target name="umls.finish.template" description="generate create_view.sql for oracle/mysql" unless="mssql">
		<copy file="${sql.dir}/umls/create_view.template.sql" tofile="${sql.dir}/umls/create_view.sql" overwrite="yes">
			<filterset>
				<filter token="UMLS_SCHEMA" value="${umls.schema}" />
			</filterset>
		</copy>
	</target>
	<target name="umls.finish" depends="umls.finish.template" description="index umls tables, create lookup view">
		<echo>index umls tables</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="create_indices.sql" />
		</antcall>
		<echo>create lookup view</echo>
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="./umls" />
			<param name="sqlcmd.script" value="create_view.sql" />
		</antcall>
	</target>
	<!-- uima script targets -->
	<target name="uima.all" description="drop and create ytex uima tables" depends="uima.drop,uima.create" />
	<target name="uima.drop" description="drop ytex uima tables">
		<for list="drop_view.sql,drop_document.sql,drop_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="uima" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="uima.create" description="create ytex uima tables">
		<for list="create_reference.sql,create_document.sql,create_view.sql,insert_reference.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="uima" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
		<antcall target="examples.load" />
	</target>
	<target name="examples.load" depends="init,examples.load.orcl,examples.load.mssql">
		<antcall target="sqlcmd">
			<param name="sqlcmd.dir" value="uima" />
			<param name="sqlcmd.script" value="fracture_demo.sql" />
		</antcall>
	</target>
	<target name="examples.load.orcl" depends="init" if="orcl" description="load example data with sqlldr">
		<exec executable="${sqlldr.exe}" dir="orcl/uima" failonerror="yes">
			<arg line="${sqlplus.line} control=fracture_demo.ctl" />
		</exec>
	</target>
	<target name="examples.load.mssql" depends="init" if="mssql" description="load example data with bcp">
		<exec executable="bcp" dir="examples">
			<arg line="${db.name}.${db.schema}.fracture_demo in fracture_demo.txt -T -S ${db.host} -c" />
		</exec>
	</target>

	<target name="kernel.drop" description="create tables for data mining">
		<for list="drop_tables.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="kernel" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="kernel.create" description="create tables for data mining">
		<for list="create_tables.sql" param="sqlcmd.script">
			<sequential>
				<antcall target="sqlcmd">
					<param name="sqlcmd.dir" value="kernel" />
					<param name="sqlcmd.script" value="@{sqlcmd.script}" />
				</antcall>
			</sequential>
		</for>
	</target>

</project>