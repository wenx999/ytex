<!--
-->
<project name="ytex.kernel">
	<property environment="env" />
	<property name="ytex.home" value="../.." />
	<property name="config.local" value="${ytex.home}/config/desc" />
	<property name="ytex.properties" value="${config.local}/ytex.properties" />
	<property file="${ytex.properties}" />

	<path id="kernel.cp.dev">
		<pathelement location="${config.local}" />
		<pathelement location="${ytex.home}/config/desc" />
		<pathelement location="${ytex.home}/cmc/bin" />
		<pathelement location="${ytex.home}/ytex.kernel/bin" />
		<pathelement location="${ytex.home}/ytex.model/bin" />
		<fileset dir="${ytex.home}/libs.system" includes="**/*.jar" />
		<fileset dir="${ytex.home}/ytex.web/WebContent/WEB-INF/lib" includes="**/*.jar" />
	</path>
	<path id="kernel.cp.prod">
		<pathelement location="${config.local}" />
		<pathelement location="${ytex.home}/config/desc" />
		<fileset dir="${ytex.home}/lib" includes="**/*.jar" />
		<fileset dir="${ytex.home}/web/webapps/ytex.web/WEB-INF/lib" includes="**/*.jar" />
	</path>
	<property name="kernel.cp" value="kernel.cp.prod" />
	<!-- 
	for some reason on linux just copying the jars to the ant/lib directory doesn't work.
	explicitly define the task.
	-->
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" onerror="ignore" classpathref="${kernel.cp}" />
	<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" onerror="ignore" classpathref="${kernel.cp}" />

	<target name="cv.iter.experiment" description="iterate over ${kernel.dirs} in ${kernel.exp.base}">
		<echo>kernel.exp.base ${kernel.exp.base}</echo>
		<echo>kernel.dirs ${kernel.dirs}</echo>
		<for param="kernel.data">
			<dirset dir="${kernel.exp.base}" includes="${kernel.dirs}" />
			<sequential>
				<antcall target="cv.iter.dir">
					<param name="kernel.data" value="@{kernel.data}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.init" description="initialize variables for experiment from ${kernel.data}/kernel.properties">
		<fail unless="kernel.data" />
		<property file="${kernel.data}/kernel.properties" />
		<property file="${basedir}/kernel-default.properties" />
		<makeurl property="log4j.url" file="${ytex.home}/config/desc/log4j.properties" />
		<property name="log4j.arg" value="-Dlog4j.configuration=${log4j}" />
		<property name="java.log.arg" value="-Djava.util.logging.config.file=${ytex.home}/config/desc/Logger.properties" />
		<!-- set flags to control which evaluation to perform -->
		<condition property="svmlight">
			<equals arg1="${svm.type}" arg2="svmlight" />
		</condition>
		<condition property="libsvm">
			<equals arg1="${svm.type}" arg2="libsvm" />
		</condition>
		<condition property="semil">
			<equals arg1="${svm.type}" arg2="semil" />
		</condition>
		<!-- set flags to control which machine learning target to run on each fold -->
		<condition property="cv.fold.target" value="cv.iter.semil" else="cv.iter.kernel">
			<isset property="semil" />
		</condition>
	</target>
	<target name="cv.iter.dir" description="generate all folds, evaluate libsvm" depends="cv.init">
		<echo>kernel.data ${kernel.data}</echo>
		<for list="${kernel.labels}" param="kernel.label" parallel="${parallel.labels}" threadCount="${kernel.threads}">
			<sequential>
				<antcall target="cv.iter.label">
					<param name="kernel.label" value="@{kernel.label}" />
					<param name="kernel.data" value="${kernel.data}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.iter.label" description="process folds for label" depends="cv.init">
		<property name="kernel.label" value="0" />
		<echo>cv.iter.label kernel.label=${kernel.label} kernel.data=${kernel.data}</echo>
		<condition property="labelprefix" value="" else="label${kernel.label}_">
			<equals arg1="${kernel.label}" arg2="0" />
		</condition>
		<property name="label.dir" value="${cv.tmpdir}/${kernel.experiment}-${kernel.label}" />
		<mkdir dir="${label.dir}" />
		<!-- copy files for the specified label -->
		<copy todir="${label.dir}">
			<fileset dir="${kernel.data}" includes="${labelprefix}*.*" />
		</copy>
		<!-- iterate over files -->
		<for param="training.file" parallel="${parallel.folds}" threadCount="${kernel.threads}">
			<fileset dir="${label.dir}" includes="${labelprefix}*train_data.txt" />
			<sequential>
				<antcall target="cv.iter.fold">
					<param name="cv.fold.training" value="@{training.file}" />
				</antcall>
			</sequential>
		</for>
		<!-- cleanup -->
		<mkdir dir="${kernel.data}/cv" />
		<zip destfile="${kernel.data}/cv/${kernel.label}.zip" update="yes">
			<fileset dir="${label.dir}" excludes="*.txt" />
		</zip>
		<!--
		<delete quiet="yes" includeemptydirs="yes" dir="${cv.tmpdir}/${kernel.experiment}-${kernel.label}" />
		-->
	</target>
	<target name="cv.iter.fold" description="run libsvm on specified fold, store results in database">
		<property name="kernel.label" value="0" />
		<condition property="labelprefix" value="" else="label${kernel.label}_">
			<equals arg1="${kernel.label}" arg2="0" />
		</condition>
		<property name="label.dir" value="${cv.tmpdir}/${kernel.experiment}-${kernel.label}" />
		<property name="cv.fold.training" value="${label.dir}/${labelprefix}run1_fold1_train_data.txt" />
		<basename file="${cv.fold.training}" property="cv.fold.base.prefix" suffix="_train_data.txt" />
		<basename file="${cv.fold.base.prefix}" property="cv.fold.base" />
		<property name="cv.result.dir" value="${cv.tmpdir}/${kernel.experiment}-${kernel.label}/${cv.fold.base}" />
		<antcall target="${cv.fold.target}" />
		<antcall target="cv.extractResults.db.fold" />
	</target>
	<target name="cv.iter.kernel" description="run cross-validation with all specified kernels, delegate to cv.iter.weight">
		<for list="${kernel.types}" param="kernel.type">
			<sequential>
				<echo>kernel.type = @{kernel.type}</echo>
				<antcall target="cv.iter.weight">
					<param name="kernel.type" value="@{kernel.type}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.init.classWeights" description="load property with class weights to iterate over for the given class label">
		<property name="kernel.label" value="0" />
		<echo>kernel.classweights=${kernel.classweights}</echo>
		<echo>kernel.label=${kernel.label}</echo>
		<if>
			<and>
				<available file="${kernel.classweights}" />
				<equals arg1="${svm.type}" arg2="libsvm" />
			</and>
			<then>
				<loadfile srcfile="${kernel.classweights}" property="classWeights">
					<filterchain>
						<linecontains>
							<contains value="class.weight.${kernel.label}=" />
						</linecontains>
						<replacestring from="class.weight.${kernel.label}=" to="" />
						<striplinebreaks />
					</filterchain>
				</loadfile>
			</then>
		</if>
		<echo>classWeights=${classWeights}</echo>
		<!-- for precomputed gram matrix or linear kernel, iterate over cost params -->
		<echo>kernel.type = ${kernel.type}</echo>
		<condition property="cv.iter.target" value="cv.iter.cost">
			<or>
				<equals arg1="${kernel.type}" arg2="4" />
				<equals arg1="${kernel.type}" arg2="0" />
			</or>
		</condition>
		<!-- for polynomial kernel, iterate over degrees -->
		<condition property="cv.iter.target" value="cv.iter.degree">
			<equals arg1="${kernel.type}" arg2="1" />
		</condition>
		<!-- for rbg/sigmoid iterate over gamma -->
		<condition property="cv.iter.target" value="cv.iter.gamma">
			<or>
				<equals arg1="${kernel.type}" arg2="2" />
				<equals arg1="${kernel.type}" arg2="3" />
			</or>
		</condition>
	</target>
	<target name="cv.iter.weight" depends="cv.init.classWeights" description="iterate over class weights">
		<if>
			<isset property="classWeights" />
			<then>
				<for list="${classWeights}" param="classWeight">
					<sequential>
						<echo>classWeight = @{classWeight}</echo>
						<antcall target="${cv.iter.target}">
							<param name="cv.weight" value="@{classWeight}" />
							<param name="cv.kernel.line" value="@{classWeight}" />
						</antcall>
					</sequential>
				</for>
			</then>
			<else>
				<antcall target="${cv.iter.target}">
					<param name="cv.kernel.line" value="" />
				</antcall>
			</else>
		</if>
	</target>
	<target name="cv.iter.degree" description="iterate polynomial kernel degree, delegate to cv.iter.cost">
		<for list="${cv.poly.degrees}" param="degree">
			<sequential>
				<antcall target="cv.iter.cost">
					<param name="cv.degree" value="@{degree}" />
					<param name="cv.kernel.line" value="${cv.kernel.line} -d @{degree}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.iter.gamma" description="iterate rbg kernel gamma, delegate to cv.iter.cost">
		<for list="${cv.rbf.gammas}" param="gamma">
			<sequential>
				<antcall target="cv.iter.cost">
					<param name="cv.gamma" value="@{gamma}" />
					<param name="cv.kernel.line" value="${cv.kernel.line} -g @{gamma}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.iter.cost" description="iterate over cost parameters, delegate to cv.evaluate">
		<for list="${cv.costs}" param="cost">
			<sequential>
				<antcall target="cv.evaluate">
					<param name="cv.cost" value="@{cost}" />
					<param name="cv.kernel.line" value="${cv.kernel.line} -c @{cost}" />
				</antcall>
			</sequential>
		</for>
	</target>

	<target name="cv.evaluate.init">
		<!-- want to put each result in a different directory, use timestamp, but libsvm is fast -->
		<sleep seconds="1" />
		<tstamp>
			<format property="cv.tstamp" pattern="ddhhmmS" />
		</tstamp>
		<property name="label.dir" value="${cv.tmpdir}/${kernel.experiment}-${kernel.label}" />
		<property name="cv.outdir" value="${cv.fold.base}/${cv.tstamp}" />
		<mkdir dir="${label.dir}/${cv.outdir}" />
		<property name="kernel.label" value="1" />
		<property name="cv.fold.base" value="label${kernel.label}_run1_fold1" />
		<property name="cv.fold.train" value="${cv.fold.base}_train_data.txt" />
		<property name="cv.fold.test" value="${cv.fold.base}_test_data.txt" />
		<condition property="svmlight">
			<equals arg1="${svm.type}" arg2="svmlight" />
		</condition>
	</target>

	<target name="cv.evaluate" depends="cv.evaluate.init" description="call libsvm/svmlight">
		<antcall target="cv.evaluate.svmlight" />
		<antcall target="cv.evaluate.libsvm" />
	</target>

	<target name="cv.evaluate.svmlight" if="svmlight" description="call svmlight">
		<!-- train the svm -->
		<property name="cv.eval.line" value="-t ${kernel.type} -l ${cv.outdir}/transduct.txt ${cv.kernel.line} ${cv.fold.train} ${cv.outdir}/model.txt" />
		<exec executable="${svmlight.bin}/svm_learn" dir="${label.dir}" failonerror="no" output="${label.dir}/${cv.outdir}/output.txt" timeout="${kernel.timeout}">
			<arg line="${cv.eval.line}" />
		</exec>
		<!-- test the svm -->
		<exec executable="${svmlight.bin}/svm_classify" dir="${label.dir}" failonerror="no" timeout="${kernel.timeout}">
			<arg line="${cv.fold.test} ${cv.outdir}/model.txt ${cv.outdir}/predict.txt" />
		</exec>
		<antcall target="cv.store.options" />
	</target>

	<target name="cv.evaluate.libsvm" unless="svmlight" description="train on cv training set, eval on cv test set, store results in fold-specific timestamped directory">
		<!-- train the svm -->
		<property name="cv.eval.line" value="-q -b 1 -t ${kernel.type} ${cv.kernel.line} ${cv.fold.train} ${cv.outdir}/model.txt" />
		<exec executable="${libsvm.bin}/svm-train" dir="${label.dir}" failonerror="yes">
			<arg line="${cv.eval.line}" />
		</exec>
		<!-- test the svm -->
		<exec executable="${libsvm.bin}/svm-predict" dir="${label.dir}" failonerror="yes">
			<arg line="-b 1 ${cv.fold.test} ${cv.outdir}/model.txt ${cv.outdir}/predict.txt" />
		</exec>
		<antcall target="cv.store.options" />
	</target>
	
	<target name="cv.iter.semil" description="evaluate w/ semil. iterate over distance types, gamma" depends="cv.init">
		<property name="cv.fold.base" value="run5_fold1"/>
		<for list="${cv.semil.distances}" param="kernel.distance">
			<sequential>
				<antcall target="cv.iter.semil.distance">
					<param name="kernel.distance" value="@{kernel.distance}"/>
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.iter.semil.distance" depends="cv.init">
		<property name="kernel.distance" value="1"/>
		<property name="cv.fold.base" value="run1_fold1"/>
		<property name="label.dir" value="${cv.tmpdir}/${kernel.experiment}-${kernel.label}" />
		<property name="cv.outdir" value="${cv.fold.base}/${kernel.distance}" />
		<mkdir dir="${label.dir}/${cv.outdir}" />
		<antcall target="cv.semil.dist"/>
		<antcall target="cv.store.options" />
		<for list="${cv.rbf.gammas}" param="cv.rbf.gamma">
			<sequential>
				<antcall target="cv.evaluate.semil">
					<param name="cv.rbf.gamma" value="@{cv.rbf.gamma}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.semil.dist" depends="cv.init">
		<!--
		semil distance computation will not work on windows
		requires interactive shell - otherwise fails
		
		<property name="cv.fold.base" value="run1_fold1"/>
		<property name="label.dir" value="${cv.tmpdir}/tfidf-autocon-sbinu-0" />
		<property name="semil.dist" value="${cv.fold.base}_dist.txt" />
		<property name="semil.dist.line" value="-t 2 -d 10 -l 1 -h 1 -k ${cv.semil.k} -g 10 -u ${cv.semil.u} -lambda ${cv.semil.lambda} -mu ${cv.semil.mu} ${cv.fold.base}_train_data.txt" />
		<echo>semil.dist.line ${semil.dist.line}</echo>
		<exec executable="${basedir}/semil.bat" dir="${label.dir}" vmlauncher="false" newenvironment="yes">
			<arg line="${semil.dist.line}"/>
		</exec>
		-->
	</target>
	<target name="cv.evaluate.semil" depends="cv.init">
		<property name="cv.fold.base" value="run1_fold1"/>
		<property name="label.dir" value="${cv.tmpdir}/${kernel.experiment}-${kernel.label}" />
		<property name="cv.rbf.gamma" value="10" />
		<property name="cv.outdir" value="run1_fold1/2"/>
		<property name="semil.dist" value="${cv.fold.base}_dist.txt" />
		<property name="cv.semil.line" value="-k ${cv.semil.k} -g ${cv.rbf.gamma} -u ${cv.semil.u} -lambda ${cv.semil.lambda} -mu ${cv.semil.mu} -ocl 0 ${semil.dist} ${semil.dist}.label " />
		<echo>cv.semil.line ${cv.semil.line}</echo>
		<echo>dir ${label.dir}/${cv.outdir}</echo>
		<!-- consistency method -->
		<exec executable="${semil.bin}/Semil" dir="${label.dir}/${cv.outdir}">
			<arg line="-l 1 -h 1 ${cv.semil.line}"/>
		</exec>
		<!-- gaussian random field -->
		<exec executable="${semil.bin}/Semil" dir="${label.dir}/${cv.outdir}">
			<arg line="-l 0 -h 0 ${cv.semil.line}"/>
		</exec>
	</target>
	
	<target name="cv.store.options" description="store options">
		<!-- store libsvm options -->
		<echoproperties destfile="${label.dir}/${cv.outdir}/options.properties">
			<propertyset>
				<propertyref prefix="kernel." />
				<propertyref prefix="cv." />
			</propertyset>
		</echoproperties>
	</target>
	<target name="cv.extractResults.db.fold" description="store results in db" depends="cv.init">
		<property name="kernel.label" value="0" />
		<property name="cv.fold.base" value="label1_run1_fold1" />
		<property name="cv.result.dir" value="${cv.tmpdir}/${kernel.experiment}-${kernel.label}/${cv.fold.base}" />
		<echo>cv.result.dir ${cv.result.dir}</echo>
		<java classname="ytex.kernel.ClassifierEvaluationImporter" classpathref="${kernel.cp}" fork="yes" dir="${cv.tmpdir}/${kernel.experiment}-${kernel.label}" failOnError="yes">
			<arg value="-dir" />
			<arg value="${cv.result.dir}" />
			<arg value="-type" />
			<arg value="${svm.type}" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="load.tmp">
		<property name="dirs" value="run1_fold2,run2_fold1,run2_fold2,run3_fold1,run3_fold2,run4_fold1,run4_fold2,run5_fold1,run5_fold2" />
		<for list="${dirs}" param="cv.fold.base">
			<sequential>
				<antcall target="cv.extractResults.db.fold">
					<param name="cv.fold.base" value="@{cv.fold.base}"/>
				</antcall>
			</sequential>
		</for>
	</target>
</project>
