<!--
-->
<project name="ytex.kernel">
	<property name="ytex.home" value="../.." />
	<include file="${ytex.home}/libs.system/build-classpath.xml" />

	<target name="iter.dirs" description="iterate over ${kernel.dirs} in ${kernel.exp.base}, call process.dir">
		<property name="kernel.dirs" value="*"/>
		<echo>kernel.exp.base ${kernel.exp.base}</echo>
		<echo>kernel.dirs ${kernel.dirs}</echo>
		<for param="kernel.data">
			<dirset dir="${kernel.exp.base}" includes="${kernel.dirs}" />
			<sequential>
				<antcall target="process.dir">
					<param name="kernel.data" value="@{kernel.data}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="init.dir" description="initialize variables for experiment from ${kernel.data}/kernel.properties">
		<fail unless="kernel.data" />
		<property file="${kernel.data}/kernel.properties" />
		<property file="${basedir}/kernel-default.properties" />
		<!-- set flags to control which evaluation to perform -->
		<condition property="svmlight">
			<equals arg1="${kernel.algo}" arg2="svmlight" />
		</condition>
		<condition property="libsvm">
			<equals arg1="${kernel.algo}" arg2="libsvm" />
		</condition>
		<condition property="semil">
			<equals arg1="${kernel.algo}" arg2="semil" />
		</condition>
		<!-- set flags to control which machine learning target to run on each fold -->
		<condition property="process.dir.target" value="semil.process.dir" else="svm.process.dir">
			<isset property="semil" />
		</condition>
		<property name="kernel.eval.tmpdir" value="${java.io.tmpdir}" />
		<property name="kernel.tmpdir" value="${kernel.eval.tmpdir}/${kernel.name}-${kernel.experiment}-${kernel.algo}${kernel.param1}${kernel.param2}" />
	</target>
	<target name="process.dir" description="evaluate ${kernel.algo} on all files in directory ${kernel.data}" depends="init.dir">
		<antcall target="${process.dir.target}" />
	</target>
	<target name="kernel.genParams" depends="init.dir" unless="no.genParams" description="call ClassifierEvalUtil to generate parameter grid for each training file.  skipped if no.genParams is set">
		<echo>kernel.data ${kernel.data}</echo>
		<propertyset id="kernel.props">
			<propertyref prefix="kernel." />
		</propertyset>
		<propertyset id="cv.props">
			<propertyref prefix="cv." />
		</propertyset>
		<java classname="ytex.kernel.ClassifierEvalUtil" classpathref="${kernel.cp}">
			<syspropertyset>
				<propertyset refid="cv.props" />
				<propertyset refid="kernel.props" />
			</syspropertyset>
		</java>
	</target>
	<target name="kernel.storeResults" depends="init.dir,kernel.storeDB" description="store results in db, cleanup temp dirs">
		<zip destfile="${kernel.data}/eval.zip" update="no">
			<fileset dir="${kernel.data}/eval" />
		</zip>
		<delete quiet="yes" includeemptydirs="yes" dir="${kernel.data}/eval" />
	</target>
	<target name="kernel.storeDB" description="store results in db.  take results from ${kernel.evaldir}, relative to ${kernel.data}" depends="init.dir">
		<property name="kernel.evaldir" value="eval" />
		<echo>kernel.data ${kernel.data}</echo>
		<echo>kernel.evaldir ${kernel.evaldir}</echo>
		<java classname="ytex.kernel.ClassifierEvaluationImporter" classpathref="${kernel.cp}" fork="yes" dir="${kernel.data}" failOnError="yes">
			<arg value="-dir" />
			<arg value="${kernel.evaldir}" />
			<arg value="-type" />
			<arg value="${kernel.algo}" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>

	<!--
	svm targets
	-->
	<target name="svm.process.dir" depends="init.dir,kernel.genParams,svm.iter.train" description="generate paramter grids, evaluate svm, store results" />
	<target name="svm.iter.train" description="iterate over ${kernel.data}/*train_data.txt, evaluate svm.  call svm.processFile" depends="init.dir">
		<echo>kernel.data ${kernel.data}</echo>
		<!-- iterate over files -->
		<antcall target="svm.iter.train.cluster" />
		<antcall target="svm.iter.train.local" />
	</target>
	<target name="svm.iter.train.cluster" if="kernel.cluster" description="iterate over files, send to cluster for processing. will only run if kernel.cluster is set.">
		<fileset id="train.fileset" dir="${kernel.data}" includes="*train_data.txt" />
		<!--
		this doesn't work - can't use newline as a separator.  
		use a for loop to create a list of files for processing
		<pathconvert property="train.list" refid="train.fileset" pathsep="&#9252;" />
		<echo file="${kernel.data}/train.list.txt">${train.list}</echo>
		-->
		<delete file="${kernel.data}/train.list.txt" quiet="yes" />
		<for param="training.file">
			<fileset refid="train.fileset" />
			<sequential>
				<echo file="${kernel.data}/train.list.txt" append="yes">@{training.file}
</echo>
			</sequential>
		</for>
		<!-- count the files to process for the qsub array task -->
		<resourcecount property="train.count" refid="train.fileset" />
		<!-- launch array task and wait for it to complete -->
		<exec executable="qsub" failonerror="yes">
			<arg line="-sync y -t 1-${train.count} ${ant.pbs} svm.processFile.cluster -Dkernel.data=${kernel.data}" />
		</exec>
		<!-- array task is done - launch the task to store the results -->
		<exec executable="qsub">
			<arg line="-sync ${kernel.storeResults.sync} ${ant.pbs} kernel.storeResults -Dkernel.data=${kernel.data}" />
		</exec>
	</target>
	<target name="svm.iter.train.local" unless="kernel.cluster" description="iterate over files, process locally. use multiple threads if parallel.folds.  will only run if kernel.cluster is not set.">
		<for param="training.file" parallel="${parallel.folds}" threadCount="${kernel.threads}">
			<fileset dir="${kernel.data}" includes="*train_data.txt" />
			<sequential>
				<antcall target="svm.processFile">
					<param name="kernel.train.data" value="@{training.file}" />
				</antcall>
			</sequential>
		</for>
		<antcall target="kernel.storeResults" />
	</target>
	<target name="svm.processFile.cluster" depends="init.dir" description="read the file number property passed via qsub array task.  load this file name from the file list and proces.">
		<property name="filenum" value="${env.SGE_TASK_ID}" />
		<echo>filenum ${filenum}</echo>
		<loadfile srcfile="${kernel.data}/train.list.txt" property="kernel.train.data">
			<filterchain>
				<filterreader classname="org.apache.tools.ant.filters.HeadFilter">
					<param name="lines" value="${filenum}" />
				</filterreader>
				<filterreader classname="org.apache.tools.ant.filters.TailFilter">
					<param name="lines" value="1" />
				</filterreader>
				<striplinebreaks />
			</filterchain>
		</loadfile>
		<echo>kernel.train.data ${kernel.train.data}</echo>
		<antcall target="svm.processFile" />
	</target>
	<target name="svm.processFile" depends="init.dir" description="iterate over parameter grid and run svm on specified file. calls svm.evaluate on ${kernel.train.data} for each command line in ${kernel.evalLines}">
		<property name="kernel.train.data" value="${kernel.data}/label1_run1_fold1_train_data.txt" />
		<echo>${kernel.train.data}</echo>
		<basename file="${kernel.train.data}" property="kernel.data.filename" suffix=".txt" />
		<basename file="${kernel.data.filename}" property="kernel.data.basename" suffix="train_data" />
		<property name="kernel.workdir" value="${kernel.tmpdir}-${kernel.data.filename}" />
		<!-- load parameter grid -->
		<property file="${kernel.data}/${kernel.data.filename}.properties" />
		<echo>kernel.data.filename ${kernel.data.filename}</echo>
		<echo>kernel.data.basename ${kernel.data.basename}</echo>
		<echo>kernel.evalLines ${kernel.evalLines}</echo>
		<fail unless="kernel.evalLines" />
		<echo>kernel.data.basename ${kernel.data.basename}</echo>
		<echo>kernel.workdir ${kernel.workdir}</echo>
		<mkdir dir="${kernel.workdir}" />
		<copy todir="${kernel.workdir}">
			<fileset dir="${kernel.data}" includes="${kernel.data.basename}*.*" />
		</copy>
		<for param="kernel.evalLine" list="${kernel.evalLines}">
			<sequential>
				<antcall target="svm.evaluate">
					<param name="kernel.evalLine" value="@{kernel.evalLine}" />
				</antcall>
			</sequential>
		</for>
		<!-- copy svm output -->
		<mkdir dir="${kernel.data}/eval/${kernel.data.filename}" />
		<copy todir="${kernel.data}/eval/${kernel.data.filename}">
			<fileset dir="${kernel.workdir}" excludes="*.*" />
		</copy>
		<!-- cleanup temp dir -->
		<delete quiet="yes" includeemptydirs="yes" dir="${kernel.workdir}" />
	</target>
	<target name="svm.evaluate.init" description="create temp dir to store svm results">
		<!-- want to put each result in a different directory, use timestamp, but libsvm is fast -->
		<sleep milliseconds="10" />
		<tstamp>
			<format property="cv.tstamp" pattern="dd-hh-mm-s.S" />
		</tstamp>
		<property name="kernel.outdir" value="${cv.tstamp}" />
		<mkdir dir="${kernel.workdir}/${kernel.outdir}" />
		<echo>kernel.data.basename ${kernel.data.basename}</echo>
		<property name="eval.train.data" value="${kernel.data.basename}train_data.txt" />
		<property name="eval.test.data" value="${kernel.data.basename}test_data.txt" />
	</target>
	<target name="svm.evaluate" depends="svm.evaluate.init" description="call libsvm/svmlight">
		<antcall target="svm.evaluate.svmlight" />
		<antcall target="svm.evaluate.libsvm" />
	</target>
	<target name="svm.evaluate.svmlight" if="svmlight" description="call svmlight">
		<!-- train the svm -->
		<property name="kernel.train.line" value="${kernel.evalLine} -l ${kernel.outdir}/transduct.txt ${eval.train.data} ${kernel.outdir}/model.txt" />
		<echo>kernel.train.line ${kernel.train.line}</echo>
		<exec executable="${svmlight.bin}/svm_learn" dir="${kernel.workdir}" failonerror="no" output="${label.dir}/${kernel.outdir}/output.txt" timeout="${kernel.timeout}">
			<arg line="${kernel.train.line}" />
		</exec>
		<!-- test the svm -->
		<exec executable="${svmlight.bin}/svm_classify" dir="${kernel.workdir}" failonerror="no" timeout="${kernel.timeout}">
			<arg line="${eval.test.data} ${kernel.outdir}/model.txt ${kernel.outdir}/predict.txt" />
		</exec>
		<antcall target="svm.store.options" />
	</target>
	<target name="svm.evaluate.libsvm" if="libsvm" description="call libsvm">
		<!-- train the svm -->
		<property name="kernel.train.line" value="${kernel.evalLine} ${eval.train.data} ${kernel.outdir}/model.txt" />
		<echo>kernel.train.line ${kernel.train.line}</echo>
		<exec executable="${libsvm.bin}/svm-train" dir="${kernel.workdir}" failonerror="yes">
			<arg line="${kernel.train.line}" />
		</exec>
		<!-- test the svm -->
		<exec executable="${libsvm.bin}/svm-predict" dir="${kernel.workdir}" failonerror="yes">
			<arg line="${kernel.libsvm.test.line} ${eval.test.data} ${kernel.outdir}/model.txt ${kernel.outdir}/predict.txt" />
		</exec>
		<antcall target="svm.store.options" />
	</target>
	<target name="svm.store.options" description="store options">
		<!-- store svm options -->
		<echoproperties destfile="${kernel.workdir}/${kernel.outdir}/options.properties">
			<propertyset>
				<propertyref prefix="kernel." />
			</propertyset>
		</echoproperties>
	</target>

	<!--
	semil targets:
	-->
	<target name="semil.process.dir" depends="init.dir,semil.createDistances,kernel.genParams,semil.evaluate,kernel.storeResults" description="generate distance matrices, run semil" />
	<target name="semil.createDistances" depends="init.dir" description="iterate of data files, generate distance matrices">
		<for param="kernel.data.file">
			<fileset dir="${kernel.data}" includes="*data.txt" />
			<sequential>
				<antcall target="semil.createDistance">
					<param name="kernel.data.file" value="@{kernel.data.file}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="semil.createDistance" description="generate distance matrix by calling semil_dist.R script">
		<!--
		semil distance computation will not work on windows
		requires interactive shell - otherwise fails
		created R script to generate distance matrix
		
		default to cross-validation settings.
		this can be overridden by eval.properties
		-->
		<echo>kernel.data.file ${kernel.data.file}</echo>
		<property name="kernel.data.file" value="./label1_data.txt" />
		<!-- strip off the directory -->
		<basename file="${kernel.data.file}" property="kernel.data.file.name" />
		<!-- strip off the data.txt prefix - this is the prefix for the distance file -->
		<basename file="${kernel.data.file.name}" property="kernel.basename" suffix="data.txt" />
		<!-- load label.properties file - can override default cv.semil.metrics and cv.semil.degrees there -->
		<property file="${kernel.data}/${kernel.basename}label.properties" />
		<property name="semil.prefix" value="${kernel.basename}dist_" />
		<property name="semil.metrics" value="${cv.semil.metrics}" />
		<property name="semil.degrees" value="${cv.semil.degrees}" />
		<property name="semil.gram" value="${cv.semil.gram}" />
		<echo>semil.metrics ${semil.metrics}</echo>
		<echo>semil.degrees ${semil.degrees}</echo>
		<mkdir dir="${kernel.dist.dir}" />
		<exec executable="${R.bin}/R" dir="${kernel.data}">
			<arg line="--slave --file=${basedir}/semil_dist.R --args ${kernel.data.file} ${semil.metrics} ${semil.prefix} ${semil.degrees} ${semil.gram}" />
		</exec>
	</target>
	<target name="semil.evaluate" depends="init.dir" description="iterate over *label.txt, call semil.processLabelFile">
		<for param="kernel.label.file" parallel="${parallel.folds}" threadCount="${kernel.threads}">
			<fileset dir="${kernel.data}" includes="*label.txt" />
			<sequential>
				<antcall target="semil.processLabelFile">
					<param name="kernel.label.file" value="@{kernel.label.file}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="semil.processLabelFile" depends="init.dir" description="iterate over kernel.distFiles, call semil.iter.evalLines">
		<property name="kernel.label.file" value="${kernel.data}/label1_run1_fold1_label.txt" />
		<basename file="${kernel.label.file}" property="kernel.label.filename" />
		<basename file="${kernel.label.filename}" property="kernel.label.basename" suffix=".txt" />
		<!-- load properties kernel.distFiles and kernel.evalLines defined -->
		<property file="${kernel.data}/${kernel.label.basename}.properties" />
		<property name="kernel.label.dir" value="${kernel.tmpdir}-${kernel.label.basename}" />
		<echo>kernel.label.dir ${kernel.label.dir}</echo>
		<mkdir dir="${kernel.label.dir}" />
		<!-- copy distance files to working directory -->
		<copy todir="${kernel.label.dir}">
			<fileset dir="${kernel.data}" includes="${kernel.distFiles}" />
			<fileset dir="${kernel.data}" includes="${kernel.label.filename}" />
		</copy>
		<!-- iterate over distance files -->
		<for list="${kernel.distFiles}" param="kernel.dist.file">
			<sequential>
				<antcall target="semil.iter.evalLines">
					<param name="kernel.dist.file" value="@{kernel.dist.file}" />
				</antcall>
			</sequential>
		</for>
		<!-- copy results -->
		<mkdir dir="${kernel.data}/eval/${kernel.label.basename}" />
		<copy todir="${kernel.data}/eval/${kernel.label.basename}">
			<fileset dir="${kernel.label.dir}" includes="*.output" />
		</copy>
		<!-- store semil options -->
		<echoproperties destfile="${kernel.data}/eval/${kernel.label.basename}/options.properties">
			<propertyset>
				<propertyref prefix="kernel." />
			</propertyset>
		</echoproperties>
		<!-- delete unneeded files -->
		<delete dir="${kernel.label.dir}" quiet="yes" />
	</target>

	<target name="semil.iter.evalLines" description="iterate over kernel.evalLines, call semil.eval.label">
		<for list="${kernel.evalLines}" param="kernel.line">
			<sequential>
				<antcall target="semil.eval.label">
					<param name="kernel.line" value="@{kernel.line}" />
				</antcall>
			</sequential>
		</for>
	</target>

	<target name="semil.eval.label" description="evaluate semil">
		<exec executable="${semil.bin}/Semil" dir="${kernel.label.dir}">
			<arg line="${kernel.line} ${kernel.dist.file} ${kernel.label.filename}" />
		</exec>
	</target>

</project>
