<project name="Libsvm">
	<property environment="env" />
	<property name="ytex.home" value="../.." />
	<property name="config.local" value="${ytex.home}/config/desc" />
	<property name="ytex.properties" value="${config.local}/ytex.properties" />
	<property name="log4j.param" value="-Dlog4j.configuration=file://${ytex.home}/config/desc/log4j.properties" />
	<property file="${ytex.properties}" />
	<property name="libsvm.home" value="c:/java/libsvm-3.0" />
	<property name="libsvm.bin" value="${libsvm.home}/windows" />
	<property name="experiment" value="ctakes-bow" />
	<property name="processedData" value="${ytex.home}/cmc/libsvm/${experiment}" />
	<property name="cv.tmpdir" value="${java.io.tmpdir}" />
	<!--
	<property name="costs" value="0.0001,0.001,0.01,0.1,1,10,100,1000" />
	-->
	<property name="costs" value="1" />
	<!-- degrees to test polynomical kernel with -->
	<property name="cv.poly.degrees" value="1,2,3" />
	<property name="mysql.line" value="--user=${db.username} --password=${db.password} --host=${db.host} ${db.schema}" />
	<!-- libsvm kernel type -->
	<property name="kernel.type" value="0" />
	<property name="kernel.mod" value="2" />
	<property name="threads" value="2" />
	<property name="ant.pbs" value="${user.home}/ant.pbs" />

	<!-- property name="classLabels" value="25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45" / -->
	<property name="classLabels" value="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45" />
	<property name="maxClassLabel" value="45" />
	<!--
	<property name="costs" value="1,10" />
	<property name="classLabels" value="1,2" />
	-->

	<path id="libsvm.cp">
		<pathelement location="${config.local}" />
		<pathelement location="${ytex.home}/config/desc" />
		<pathelement location="${ytex.home}/cmc/bin" />
		<pathelement location="${ytex.home}/ytex.kernel/bin" />
		<pathelement location="${ytex.home}/ytex.model/bin" />
		<fileset dir="${ytex.home}/libs.system" includes="**/*.jar" />
		<fileset dir="${ytex.home}/ytex.web/WebContent/WEB-INF/lib" includes="**/*.jar" />
	</path>
	<!-- 
	for some reason on linux just copying the jars to the ant/lib directory doesn't work.
	explicitly define the task.
	-->
	<taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" onerror="ignore" classpathref="libsvm.cp" />

	<!-- property name="classLabels" value="1,2"/ -->
	<!-- property name="costs" value="0.01,0.1" / -->
	<!--
	<target name="cv.consolidateResult.all">
		<antcall target="cv.all">
			<param name="iteration.target" value="cv.consolidateResult" />
			<param name="iteration.parallel" value="false" />
		</antcall>
	</target>
	-->
	<target name="all" depends="kernel.evalAllSlices,cv.all" />

	<target name="cv.all" depends="export.data,cv.all.folds,cv.consolidateResult.all" />

	<target name="export.data" description="export libsvm data" depends="export.data.cluster,export.data.local" />
	<target name="export.data.local" unless="ytex.cluster" description="export libsvm data locally">
		<antcall target="export.data.internal" />
	</target>
	<target name="export.data.cluster" if="ytex.cluster" description="export libsvm data on cluster">
		<exec executable="qsub">
			<arg line="-sync y ${ant.pbs} export.data.internal" />
		</exec>
	</target>
	<target name="export.data.internal" depends="export.data.initType" description="for precomputed kernel export gram matrix, else export bag of words">
		<antcall target="${export.target}" />
	</target>
	<target name="export.data.initType" description="select the export procedure based on kernel type.">
		<condition property="export.target" value="export.data.gram" else="export.data.bow">
			<equals arg1="${kernel.type}" arg2="4" />
		</condition>
	</target>
	<target name="export.data.gram" if="export.data.gram" description="export gram matrix">
		<java classname="ytex.libsvm.LibSVMGramMatrixExporterImpl" classpathref="libsvm.cp" dir="${processedData}" fork="yes">
			<arg value="libsvm-export.xml" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="${log4j.param}" />
		</java>
	</target>
	<target name="export.data.bow" if="export.data.bow" description="export bag of words">
		<java classname="ytex.KernelLauncher" classpathref="libsvm.cp" dir="${processedData}" fork="yes">
			<arg value="-exportBagOfWords" />
			<arg value="export-bow.xml" />
			<arg value="-exportType" />
			<arg value="libsvm" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="${log4j.param}" />
		</java>
	</target>
	<target name="cv.all.folds" depends="cv.all.folds.cluster,cv.all.folds.local" />
	<target name="cv.all.folds.cluster" description="on cluster, generate all folds, evaluate libsvm" if="ytex.cluster">
		<exec executable="qsub">
			<arg line="-sync y -t 1-${maxClassLabel} ${ant.pbs} cv.generateFolds.cluster" />
		</exec>
	</target>
	<target name="cv.generateFolds.cluster" description="generate folds for label and evaluate on cluster">
		<antcall target="cv.generateFolds">
			<param name="cv.classLabel" value="${env.SGE_TASK_ID}" />
		</antcall>
	</target>
	<target name="cv.all.folds.local" description="generate all folds, evaluate libsvm" unless="ytex.cluster">
		<property name="iteration.target" value="cv.classWeightCost" />
		<property name="iteration.parallel" value="true" />
		<for list="${classLabels}" param="classLabel" parallel="${iteration.parallel}" threadCount="${threads}">
			<sequential>
				<antcall target="cv.generateFolds">
					<param name="cv.classLabel" value="@{classLabel}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.generateFolds" description="generate folds for label and evaluate locally">
		<property name="cv.classLabel" value="1" />
		<mkdir dir="${cv.tmpdir}" />
		<echo>cv.tmpdir=${cv.tmpdir}</echo>
		<java classname="ytex.libsvm.CreateStratifiedCVFolds" classpathref="libsvm.cp" fork="no">
			<arg value="-data" />
			<arg value="${processedData}/training_data_${cv.classLabel}.txt" />
			<arg value="-outdir" />
			<arg value="${cv.tmpdir}" />
			<arg value="-folds" />
			<arg value="10" />
			<!--
			<jvmarg value="${log4j.param}" />
			-->
		</java>
		<for param="training.file">
			<fileset dir="${cv.tmpdir}" includes="training_data_${cv.classLabel}_fold*_train.txt" />
			<sequential>
				<antcall target="cv.iter.weight">
					<param name="cv.fold.training" value="@{training.file}" />
				</antcall>
			</sequential>
		</for>
		<delete quiet="yes">
			<fileset dir="${cv.tmpdir}" includes="training_data_${cv.classLabel}_fold*.*" />
		</delete>
	</target>
	<target name="cv.init.classWeights" description="load property with class weights to iterate over for the given class label">
		<property name="cv.classLabel" value="1" />
		<loadfile srcfile="${basedir}/classWeights.properties" property="classWeights">
			<filterchain>
				<linecontains>
					<contains value="class.weight.${cv.classLabel}=" />
				</linecontains>
				<replacestring from="class.weight.${cv.classLabel}=" to="" />
				<striplinebreaks />
			</filterchain>
		</loadfile>
		<!-- for precomputed gram matrix or linear kernel, iterate over cost params -->
		<condition property="cv.iter.target" value="cv.iter.cost">
			<or>
				<equals arg1="${kernel.type}" arg2="4" />
				<equals arg1="${kernel.type}" arg2="0" />
			</or>
		</condition>
		<!-- for polynomial kernel, iterate over degrees -->
		<condition property="cv.iter.target" value="cv.iter.degree">
			<equals arg1="${kernel.type}" arg2="1" />
		</condition>
		<!-- for rbg, iterate over gamma -->
		<condition property="cv.iter.target" value="cv.iter.gamma">
			<equals arg1="${kernel.type}" arg2="2" />
		</condition>
	</target>
	<target name="cv.iter.weight" depends="cv.init.classWeights" description="iterate over class weights">
		<property name="cv.fold.training" value="${cv.tmpdir}/training_data_20_fold1_train.txt" />
		<basename file="${cv.fold.training}" property="cv.fold.base" suffix="_train.txt" />
		<for list="${classWeights}" param="classWeight">
			<sequential>
				<antcall target="${cv.iter.target}">
					<param name="cv.libsvm.line" value="-w1 @{classWeight}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.iter.degree" description="iterate polynomial kernel degree, delegate to cv.iter.cost">
		<for list="${cv.poly.degrees}" param="degree">
			<sequential>
				<antcall target="cv.iter.cost">
					<param name="cv.degree" value="@{degree}" />
					<param name="cv.libsvm.line" value="${cv.libsvm.line} -d @{degree}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.iter.gamma" description="iterate rbg kernel gamma, delegate to cv.iter.cost">
		<for list="${costs}" param="gamma">
			<sequential>
				<antcall target="cv.iter.cost">
					<param name="cv.gamma" value="@{gamma}" />
					<param name="cv.libsvm.line" value="${cv.libsvm.line} -g @{gamma}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.iter.cost" description="iterate over cost parameters, delegate to cv.evaluate">
		<for list="${costs}" param="cost">
			<sequential>
				<antcall target="cv.evaluate">
					<param name="cv.libsvm.line" value="${cv.libsvm.line} -c @{cost}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.evaluate" description="train on cv training set, eval on cv test set">
		<property name="cv.classLabel" value="10" />
		<property name="cv.libsvm.line" value="-c 1 -w1 1" />
		<property name="cv.fold.base" value="training_data_10_fold8" />
		<property name="cv.fold.train" value="${cv.fold.base}_train.txt" />
		<property name="cv.fold.test" value="${cv.fold.base}_test.txt" />
		<property name="cv.fold.model" value="${cv.fold.base}_model.txt" />
		<property name="cv.fold.predict" value="${cv.fold.base}_predict.txt" />
		<!--
		<java classname="svm_train" fork="yes" classpathref="libsvm.cp" >
			<arg line="-q -b 1 -t 4 -w1 ${cv.weight} -c ${cv.cost} ${cv.fold.train} ${cv.fold.model}" />
		</java>
		<java classname="svm_predict" fork="yes" classpathref="libsvm.cp" >
			<arg line="-b 1 ${cv.fold.test} ${cv.fold.model} ${cv.fold.predict}" />
		</java>
		-->
		<!-- train the svm -->
		<property name="cv.eval.line" value="-q -b 1 -t ${kernel.type} ${cv.libsvm.line} ${cv.fold.train} ${cv.fold.model}"/>
		<exec executable="${libsvm.bin}/svm-train" dir="${cv.tmpdir}" failonerror="yes">
			<arg line="${cv.eval.line}" />
		</exec>
		<!-- test the svm -->
		<exec executable="${libsvm.bin}/svm-predict" dir="${cv.tmpdir}" failonerror="yes">
			<arg line="-b 1 ${cv.fold.test} ${cv.fold.model} ${cv.fold.predict}" />
		</exec>
		<!-- extract results -->
		<antcall target="cv.extractResults" />
	</target>
	<target name="cv.extractResults" description="calculate IR metrics, calculate optimal threshold, output to cv_${cv.classLabel}.txt">
		<property name="cv.classLabel" value="20" />
		<property name="cv.cost" value="1" />
		<property name="cv.weight" value="1" />
		<property name="cv.gamma" value="" />
		<property name="cv.degree" value="" />
		<property name="cv.fold.base" value="training_data_20_fold8" />
		<property name="cv.fold.train" value="${cv.fold.base}_train.txt" />
		<property name="cv.fold.test" value="${cv.fold.base}_test.txt" />
		<property name="cv.fold.model" value="${cv.fold.base}_model.txt" />
		<property name="cv.fold.predict" value="${cv.fold.base}_predict.txt" />
		<property name="cv.outfile" value="${processedData}/cv_${cv.classLabel}.txt" />
		<script language="beanshell" classpathref="libsvm.cp">
			<![CDATA[
			import ytex.libsvm.*;
			String processedDataDir = project.getProperty("processedData");
			String cvTmpDir = project.getProperty("cv.tmpdir");
			String testFile = project.getProperty("cv.fold.test");
			String predictFile = project.getProperty("cv.fold.predict");
			String modelFile = project.getProperty("cv.fold.model");
			LibSVMParser p = new LibSVMParser();
			ScutLibsvm scut = new ScutLibsvm(); 
			int nSV = p.parseModel(cvTmpDir+"/"+modelFile);
			project.setProperty("cv.nsv", Integer.toString(nSV));
			Object[] scutMetrics = scut.calculateScutLibsvm(cvTmpDir+"/"+predictFile, cvTmpDir+"/"+testFile);
			project.setProperty("cv.metrics", 
				scutMetrics[1].toString() + "\t"
				+ Double.toString(scutMetrics[0]) + "\t"
				+ scutMetrics[2].toString()); 
		]]>
		</script>
		<!-- 
		generate tab delimited output with libsvm parameters and results
		the columns here must match the columns in load_cv.template.sql 
		-->
		<echo append="yes" file="${cv.outfile}">libsvm	${cv.eval.line}	${kernel.type}	${cv.classLabel}	${cv.cost}	${cv.weight}	${cv.gamma}	${cv.degree}	${cv.nsv}	${cv.metrics}
</echo>
	</target>
	<target name="cv.consolidateResult.all" description="consolidate the results of all the cross-validation runs into a single file, import into weka_results table">
		<delete file="${processedData}/cv.txt" quiet="yes" />
		<concat destfile="${processedData}/cv.txt">
			<fileset dir="${processedData}" includes="cv_*.txt" />
		</concat>
		<copy file="${basedir}/load_cv.template.sql" tofile="${processedData}/load_cv.sql" overwrite="yes">
			<filterset>
				<filter token="EXPERIMENT" value="${experiment}" />
			</filterset>
		</copy>
		<exec executable="${mysql.bin.home}/mysql" dir="${processedData}">
			<arg line="${mysql.line} -e &quot;source load_cv.sql&quot;" />
		</exec>
	</target>
	<target name="generateOptimalParams" description="generate optimal parameters for running test evaluation">
		<copy file="${basedir}/select_params.template.sql" tofile="${processedData}/select_params.sql" overwrite="yes">
			<filterset>
				<filter token="EXPERIMENT" value="${experiment}" />
			</filterset>
		</copy>
		<exec executable="${mysql.bin.home}/mysql" dir="${processedData}" output="${processedData}/optimalParams.properties">
			<arg line="${mysql.line} -e &quot;source select_params.sql&quot; -s" />
		</exec>
	</target>
	<target name="test.all" depends="test.eval.all,test.loadResults" />
	<target name="test.eval.all">
		<property name="test.outfile" value="${processedData}/test_results.txt" />
		<delete file="test.outfile" quiet="yes" />
		<for list="${classLabels}" param="classLabel">
			<sequential>
				<antcall target="test.evaluate">
					<param name="test.classLabel" value="@{classLabel}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="test.evaluate" depends="init.test.evaluate">
		<!-- train the svm -->
		<property name="test.classLabel" value="1" />
		<property name="test.train" value="training_data_${test.classLabel}.txt" />
		<property name="test.test" value="test_data_${test.classLabel}.txt" />
		<property name="test.model" value="model_${cv.fold.base}.txt" />
		<property name="test.predict" value="predict_${cv.fold.base}.txt" />
		<exec executable="${libsvm.bin}/svm-train" dir="${processedData}">
			<arg line="-q -b 1 -t 4 -w1 ${weight} -c ${cost} ${test.train} ${test.model}" />
		</exec>
		<!-- test the svm -->
		<exec executable="${libsvm.bin}/svm-predict" dir="${processedData}">
			<arg line="-b 1 ${test.test} ${test.model} ${test.predict}" />
		</exec>
		<!-- extract results -->
		<antcall target="test.extractResults">
		</antcall>
	</target>
	<target name="init.test.evaluate">
		<property name="test.classLabel" value="20" />
		<loadproperties srcfile="${processedData}/optimalParams.properties">
			<filterchain>
				<linecontains>
					<contains value="${test.classLabel}." />
				</linecontains>
				<replacestring from="${test.classLabel}." to="" />
			</filterchain>
		</loadproperties>
		<echo>${cost} ${weight} ${scut}</echo>
	</target>
	<target name="test.extractResults" description="calculate IR metrics, calculate optimal threshold, output to cv_${cv.classLabel}.txt">
		<!-- train the svm -->
		<property name="test.classLabel" value="1" />
		<property name="test.test" value="test_data_${test.classLabel}.txt" />
		<property name="test.predict" value="predict_${test.classLabel}.txt" />
		<property name="test.outfile" value="${processedData}/test_results.txt" />
		<property name="scut" value="0.5" />
		<script language="beanshell" classpathref="libsvm.cp">
			<![CDATA[
			import ytex.libsvm.*;
			String processedDataDir = project.getProperty("processedData");
			String testFile = project.getProperty("test.test");
			String predictFile = project.getProperty("test.predict");
			Double scut = Double.parseDouble(project.getProperty("scut"));
			LibSVMParser p = new LibSVMParser();
			ScutLibsvm scutLibsvm = new ScutLibsvm(); 
			Object[] scutMetrics = scutLibsvm.applyScutLibsvm(processedDataDir+"/"+predictFile, processedDataDir+"/"+testFile, scut);
			project.setProperty("test.metrics", 
				scutMetrics[0].toString() + "\t"
				+ scutMetrics[1].toString());
		]]>
		</script>
		<echo append="yes" file="${test.outfile}">${test.classLabel}	${test.metrics}
</echo>
	</target>
	<target name="test.loadResults" description="consolidate the results of all the cross-validation runs into a single file, import into weka_results table">
		<copy file="${basedir}/test_results.template.sql" tofile="${processedData}/test_results.sql" overwrite="yes">
			<filterset>
				<filter token="EXPERIMENT" value="${experiment}" />
			</filterset>
		</copy>
		<exec executable="${mysql.bin.home}/mysql" dir="${processedData}">
			<arg line="${mysql.line} -e &quot;source test_results.sql&quot;" />
		</exec>
	</target>
	<target name="kernel.storeInstanceMap">
		<echo>${db.url}</echo>
		<java classname="ytex.KernelLauncher" dir="${processedData}" fork="yes" classpathref="libsvm.cp">
			<arg line="-beans ./beans-corpus-kernel.xml -storeInstanceMap instanceMap.obj" />
			<jvmarg value="-Xmx1g" />
		</java>
	</target>
	<target name="kernel.generateSliceList" description="create property kernel.slices for use in for loop">
		<script language="beanshell" classpathref="libsvm.cp">
			<![CDATA[
			int mod = Integer.parseInt(project.getProperty("kernel.mod"));
			String slices = "";
			for(int i = 1; i<=mod; i++) {
				slices = slices + i;
				if(i < mod)
					slices = slices + ",";
			}
			project.setProperty("kernel.slices", slices);
		]]>
		</script>
	</target>
	<target name="kernel.evalSlice.cluster" if="env.SGE_TASK_ID" description="evaluate kernel on cluster node - determine slice from env.SGE_TASK_ID">
		<fail unless="kernel.mod" />
		<antcall target="kernel.evalSlice">
			<param name="kernel.slice" value="${env.SGE_TASK_ID}" />
		</antcall>
	</target>
	<target name="kernel.evalAllSlices.cluster" if="ytex.cluster" description="submit array job to cluster to evaluate kernel in parallel">
		<exec executable="qsub">
			<arg line="-sync y -t 1-${kernel.mod} ${ant.pbs} kernel.evalSlice.cluster" />
		</exec>
	</target>
	<target name="kernel.evalAllSlices.local" depends="kernel.generateSliceList" unless="ytex.cluster">
		<for list="${kernel.slices}" param="kernel.slice" parallel="yes" threadCount="${kernel.mod}">
			<sequential>
				<antcall target="kernel.evalSlice">
					<param name="kernel.slice" value="@{kernel.slice}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="kernel.evalAllSlices" depends="kernel.evalAllSlices.cluster,kernel.evalAllSlices.local" />
	<target name="kernel.evalSlice">
		<property name="kernel.slice" value="1" />
		<java classname="ytex.KernelLauncher" dir="${processedData}" fork="yes" classpathref="libsvm.cp">
			<arg line="-beans ./beans-corpus-kernel.xml -evalKernel -loadInstanceMap instanceMap.obj -mod ${kernel.mod} -slice ${kernel.slice}" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.param}" />
		</java>
	</target>
	<target name="kernel.evalAll">
		<java classname="ytex.kernel.evaluator.CorpusKernelEvaluatorImpl" dir="${processedData}" fork="yes" classpathref="libsvm.cp">
			<arg line="-beans ./beans-corpus-kernel.xml" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="${log4j.param}" />
		</java>
	</target>
	<target name="kernel.all" depends="kernel.storeInstanceMap,kernel.evalAllSlices" />
	<target name="test">
		<property resource="ytex.properties" prefix="tmp" classpathref="libsvm.cp" />
		<echo>${tmp.ytex.conceptGraphDir}</echo>
	</target>
</project>
