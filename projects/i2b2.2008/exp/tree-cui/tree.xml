<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
	<!-- define node info for mapping queries -->
	<bean name="nodeInstanceInfo" class="ytex.kernel.tree.NodeMappingInfo">
		<property name="nodeType" value="instance" />
		<property name="values">
			<list>
				<value>instance_id</value>
			</list>
		</property>
	</bean>
	<bean name="nodeWordInfo" class="ytex.kernel.tree.NodeMappingInfo">
		<property name="nodeType" value="word" />
		<property name="values">
			<list>
				<value>word</value>
			</list>
		</property>
	</bean>
	<bean name="nodeConceptInfo" class="ytex.kernel.tree.NodeMappingInfo">
		<property name="nodeType" value="ontology_concept" />
		<property name="values">
			<list>
				<value>code</value>
			</list>
		</property>
	</bean>
	<!-- First query instantiates instances down to named entities 2nd query 
		adds word nodes to document nodes. -->
	<bean name="treeMappingInfo" class="ytex.kernel.tree.TreeMappingInfo">
		<property name="instanceIDField" value="instance_id" />
		<property name="prepareScript">
			<value><![CDATA[
drop table if exists tmp_sent
;
create temporary table tmp_sent 
as
select hi.instance_id, hs.anno_base_id
from corpus_doc doc
inner join corpus_label a
        on doc.instance_id = a.instance_id
        and doc.corpus_name = a.corpus_name
        and a.label = '@export.label@'
inner join cv_best_svm b
    on b.label = a.label
    and b.corpus_name = a.corpus_name
    and b.experiment = 'cui'
inner join feature_eval e
        on e.corpus_name = a.corpus_name
        and e.label = a.label
        and e.type = 'infogain-propagated'
        and e.featureset_name = 'ctakes'
        and e.param2 = 'rbpar'
inner join feature_rank r
        on r.feature_eval_id = e.feature_eval_id
        and r.rank = b.param1
inner join hotspot_instance hi
    on hi.instance_id = doc.instance_id
	and hi.label = a.label
    and hi.corpus_name = doc.corpus_name
    and hi.experiment = 'imputed'
/* limit to sentence */
inner join hotspot_sentence hs
    on hi.hotspot_instance_id = hs.hotspot_instance_id
    and hs.evaluation >= r.evaluation
where doc.corpus_name = 'i2b2.2008'
;
create unique index NK_tmp_sent on tmp_sent(instance_id, anno_base_id)
;
create index IX_tmp_sent on tmp_sent(anno_base_id)
;		
		]]></value>
		</property>
		<property name="instanceQueryMappingInfo">
			<bean class="ytex.kernel.tree.QueryMappingInfo">
				<property name="query">
					<!-- map instances -->
					<value><![CDATA[
	select distinct instance_id, 
        cast(concat(if(r.feature_name is null, '', if(negated > 0, 'neg_', 'pos_')), lower(covered_text)) as char(100)) word, 1
	from
	(
		select hs.instance_id, covered_text, coalesce(wt.negated, 0) negated
        from tmp_sent hs
        /* get words and numbers in sentence */
        inner join anno_contain ac 
            on ac.parent_anno_base_id = hs.anno_base_id
            and ac.child_uima_type_id in (22,25,26)
        /* get covered text */
        inner join anno_base ab
        	on ab.anno_base_id = ac.child_anno_base_id
        	and covered_text is not null
        	and length(covered_text) > 0
        /* get negation status */
        left join anno_word_token wt
            on wt.anno_base_id = ac.child_anno_base_id
    ) s
    left join
    (
        /* see if the feature is a hotspot */
        select r.feature_name
        from feature_eval e 
        inner join feature_rank r
            on r.feature_eval_id = e.feature_eval_id
        /* cutoff comes from word experiment */
        inner join cv_best_svm s
        	on s.label = e.label
        	and s.corpus_name = e.corpus_name
        	and s.experiment = 'word'
            and r.rank <= s.param1
        where e.corpus_name = 'i2b2.2008'
        and e.type = 'InfoGainAttributeEval'
        and e.featureset_name = 'usword'
        and e.cv_fold_id = 0
        and e.label = '@export.label@'
    ) r on r.feature_name = s.covered_text
    order by instance_id, word
    			]]></value>
				</property>
				<property name="nodeTypes">
					<list>
						<ref bean="nodeInstanceInfo" />
						<ref bean="nodeWordInfo" />
					</list>
				</property>
			</bean>
		</property>
		<property name="nodeQueryMappingInfos">
			<list>
				<!-- add named entities to the documents -->
				<bean class="ytex.kernel.tree.QueryMappingInfo">
					<!-- add the cuis -->
					<property name="query">
						<value><![CDATA[
		select distinct hs.instance_id, code
        from tmp_sent hs
        /* get words and numbers in sentence */
        inner join anno_contain ac 
            on ac.parent_anno_base_id = hs.anno_base_id
        inner join anno_ontology_concept c
        	on c.anno_base_id = ac.child_anno_base_id
        /* limit concepts based on type and frequency */
        inner join feature_rank tfr
            on tfr.feature_name = c.code
            and tfr.evaluation < 1000
        inner join feature_eval tfe
            on tfe.feature_eval_id = tfr.feature_eval_id
            and tfe.featureset_name = 'cui'
            and tfe.type = 'tfidf'
            and tfe.corpus_name = 'i2b2.2008'
		order by instance_id, code
    					]]></value>
					</property>
					<property name="nodeTypes">
						<list>
							<ref bean="nodeInstanceInfo" />
							<ref bean="nodeConceptInfo" />
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
</beans>