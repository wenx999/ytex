<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
	<!-- define node info for mapping queries -->
	<bean name="nodeInstanceInfo" class="ytex.kernel.tree.NodeMappingInfo">
		<property name="nodeType" value="instance" />
		<property name="values">
			<list>
				<value>instance_id</value>
			</list>
		</property>
	</bean>
	<bean name="nodeWordInfo" class="ytex.kernel.tree.NodeMappingInfo">
		<property name="nodeType" value="word" />
		<property name="values">
			<list>
				<value>word</value>
			</list>
		</property>
	</bean>
	<bean name="nodeNEInfo" class="ytex.kernel.tree.NodeMappingInfo">
		<property name="nodeType" value="named_entity" />
		<property name="values">
			<list>
				<value>anno_base_id</value>
				<value>certainty</value>
			</list>
		</property>
	</bean>
	<bean name="nodeOCInfo" class="ytex.kernel.tree.NodeMappingInfo">
		<property name="nodeType" value="ontology_concept" />
		<property name="values">
			<list>
				<value>code</value>
			</list>
		</property>
	</bean>
	<!-- First query instantiates instances down to named entities 2nd query 
		adds word nodes to document nodes. -->
	<bean name="treeMappingInfo" class="ytex.kernel.tree.TreeMappingInfo">
		<property name="instanceIDField" value="instance_id" />
		<property name="prepareScript"><value><![CDATA[
drop table if exists tmp_sent				
;
/* get sentences */
create temporary table tmp_sent
as
select hi.instance_id, hs.anno_base_id
from hotspot_instance hi
/* limit to label */
inner join i2b2_2008_disease ds 
    on hi.label = ds.disease
    and ds.disease_id = @export.label@
/* limit to sentence */
inner join hotspot_sentence hs
	on hi.hotspot_instance_id = hs.hotspot_instance_id
	and hs.evaluation >=  @export.cutoff@
where hi.experiment = 'bag-impcuiword'
;
create unique index ix_sent on tmp_sent(instance_id, anno_base_id)
;
create index ix_anno on tmp_sent(anno_base_id)
;
drop table if exists tmp_ne
;				
/* get named entities not contained in other named entities */
create table tmp_ne
as
select distinct hs.instance_id, ne.anno_base_id, ne.certainty
from tmp_sent hs
/* get named entities in sentence */
inner join anno_contain ac 
    on ac.parent_anno_base_id = hs.anno_base_id
inner join anno_named_entity ne
    on ne.anno_base_id = ac.child_anno_base_id
left join anno_contain cne 
    on cne.child_anno_base_id = ne.anno_base_id
    and cne.parent_uima_type_id = 8
where cne.parent_anno_base_id is null
;
create unique index ix_ne on tmp_ne(instance_id, anno_base_id)
;
create index ix_ne_anno on tmp_ne(anno_base_id)
;
		]]></value></property>
		<property name="instanceQueryMappingInfo">
			<bean class="ytex.kernel.tree.QueryMappingInfo">
				<property name="query">
					<!-- map instances -->
					<value><![CDATA[
	select distinct instance_id, 
        cast(concat(if(r.feature_name is null, '', if(negated > 0, 'neg_', 'pos_')), lower(covered_text)) as char(100)) word
	from
	(
		select hi.instance_id, covered_text, coalesce(wt.negated, 0) negated
        from hotspot_instance hi
        /* limit to label */
        inner join i2b2_2008_disease ds 
            on hi.label = ds.disease
            and ds.disease_id = @export.label@
        /* limit to sentence */
        inner join hotspot_sentence hs
            on hi.hotspot_instance_id = hs.hotspot_instance_id
            and hs.evaluation >=  @export.cutoff@
        /* get words and numbers in sentence */
        inner join anno_contain ac 
            on ac.parent_anno_base_id = hs.anno_base_id
            and ac.child_uima_type_id in (22,25,26)
        /* get covered text */
        inner join anno_base ab
        	on ab.anno_base_id = ac.child_anno_base_id
        	and covered_text is not null
        	and length(covered_text) > 0
        /* get negation status */
        left join anno_word_token wt
            on wt.anno_base_id = ac.child_anno_base_id
        where hi.corpus_name = 'i2b2.2008'
        and hi.experiment = 'bag-impcuiword'
    ) s
    left join
    (
        /* see if the feature is a hotspot */
        select r.feature_name
        from feature_eval e 
            inner join i2b2_2008_disease ds 
            on e.label = ds.disease
            and ds.disease_id = @export.label@
        inner join feature_rank r
            on r.feature_eval_id = e.feature_eval_id
            and r.evaluation >= @export.cutoff@
        where e.corpus_name = 'i2b2.2008'
        and e.type = 'InfoGainAttributeEval'
        and e.featureset_name = 'usword'
        and e.cv_fold_id = 0
    ) r on r.feature_name = s.covered_text
    order by instance_id, word
    			]]></value>
				</property>
				<property name="nodeTypes">
					<list>
						<ref bean="nodeInstanceInfo" />
						<ref bean="nodeWordInfo" />
					</list>
				</property>
			</bean>
		</property>
		<property name="nodeQueryMappingInfos">
			<list>
				<!-- add named entities to the documents -->
				<bean class="ytex.kernel.tree.QueryMappingInfo">
					<property name="query">
						<value><![CDATA[
select distinct * 
from tmp_ne
order by instance_id, anno_base_id
					]]></value>
					</property>
					<property name="nodeTypes">
						<list>
							<ref bean="nodeInstanceInfo" />
							<ref bean="nodeNEInfo" />
						</list>
					</property>
				</bean>
				<!-- add named entities to the documents -->
				<bean class="ytex.kernel.tree.QueryMappingInfo">
					<property name="query">
						<value><![CDATA[
select distinct *
from
(
	/* get concepts from this named entity */
	select ne.anno_base_id, ne.certainty, c.code
	from tmp_ne ne
	inner join anno_ontology_concept c on ne.anno_base_id = c.anno_base_id
	union
	/* get concepts from children of this named entity */
	select ne.anno_base_id, ne.certainty, c.code
	from tmp_ne ne
	inner join anno_contain ac on ac.parent_anno_base_id = ne.anno_base_id
	inner join anno_named_entity nec on nec.anno_base_id = ac.child_anno_base_id
	inner join anno_ontology_concept c on nec.anno_base_id = c.anno_base_id
) s order by anno_base_id
					]]></value>
					</property>
					<property name="nodeTypes">
						<list>
							<ref bean="nodeNEInfo" />
							<ref bean="nodeOCInfo" />
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>
</beans>