<!--
== prerequisites ==
  * umls 2010AB or higher installed in your db and used during ytex setup
  * libsvm 3.1 installed
  * [https://www.i2b2.org/NLP/Obesity/ I2B2 2008 Challenge] data downloaded
  [https://www.i2b2.org/NLP/Obesity/ Download] and extract all I2B2 2008 data files to some directory, referred to as i2b2.dir
  The following files are required:
     * obesity_patient_records_training2.xml
     * obesity_patient_records_test.xml
     * obesity_standoff_annotations_training.xml
     * obesity_standoff_annotations_test.xml
     * obesity_standoff_annotations_training_addendum.xml
     * obesity_standoff_annotations_training_addendum2.xml
     * obesity_standoff_annotations_training_addendum3.xml
  
== Configure ytex.properties ==
Add the following to your `ytex.properties` file:
{{{
# where challenge data was extracted
i2b2.dir=E:/downloads/text mining/i2b2 2008 challenge
# where libsvm binaries are located
libsvm.bin=C:/java/libsvm-3.1/windows
# where ytex is installed  
ytex.home=E:/projects/ytex
# we generate a file that contains the umls concept graph 
# this is where we store it, adjust to match your environment
ytex.conceptGraphDir=E:/projects/ytex/conceptGraph
# how many cores does your system have? 
# should have atleast 4, or this will take more than a weekend
kernel.threads=4
kernel.mod=4
# the slices should go from 1 ... kernel.mod
kernel.slices=1,2,3,4
# where to place temporary files
kernel.eval.tmpdir=E:/temp
# copy the rest as is
parallel.folds=yes
kernel.name=i2b2.2008
ytex.conceptGraphName=rbpar
ytex.corpusName=i2b2.2008
ytex.conceptSetName=ctakes
}}}

== Reproducing results ==
To load and annotate the corpus, compute hotspots, run the following (this will take 5-7 hours):
{{{
ant -Dytex.home=%YTEX_HOME% setup.all
}}} 

To run the cross validation and test, run the following (will run an entire weekend):
{{{
ant -Dytex.home=%YTEX_HOME% cv.all test.all
}}}

To run just the test using the optimal parameters we found (will run a overnight):
{{{
ant -Dytex.home=%YTEX_HOME% test.load.best test.all
}}}

-->
<project name="i2b2">
	<property environment="env" />
	<property name="ytex.home" value=".." />
	<include file="${ytex.home}/libs.system/build-classpath.xml" />
	<property name="mysql.home" value="${env.MYSQL_HOME}" />
	<property name="mysql.line" value="--user=${db.username} --password=${db.password} --host=${db.host} ${db.schema}" />
	<property name="maxMemory" value="1500m" />

	<target name="setup.all" description="annotate corpus, compute infogain" depends="setup.build.i2b2,setup.load.i2b2,setup.v_i2b2_fword_lookup,RunCPE.all,setup.tfidf,eval.infogain,setup.generateConceptGraph,InfoContentEvaluator,ImputedFeatureEvaluator,setup.generateFolds" />
	<target name="cv.all" description="cross validate all experiments on training set">
		<antcall target="cv.word.all" />
		<antcall target="cv.imputed.all" />
		<antcall target="cv.exp.all">
			<param name="kernel.experiment" value="cui" />
		</antcall>
	</target>
	<target name="test.all" description="run all experiments on test set">
		<antcall target="test.exp.all">
			<param name="kernel.experiment" value="word-test" />
		</antcall>
		<antcall target="test.exp.all">
			<param name="kernel.experiment" value="imputed-test" />
		</antcall>
		<antcall target="test.exp.all">
			<param name="kernel.experiment" value="cui-test" />
		</antcall>
	</target>
	<!-- setup targets -->
	<target name="setup.build.i2b2">
		<mkdir dir="${basedir}/bin" />
		<javac srcdir="${basedir}/src/main/java" destdir="${basedir}/bin" classpathref="${kernel.cp}" />
	</target>
	<target name="setup.load.i2b2" description="load i2b2 docs and annotations">
		<fail unless="i2b2.dir" message="i2b2.dir not set" />
		<java classname="ytex.i2b2.DocumentLoaderImpl" fork="yes" dir="${basedir}/desc" failonerror="yes">
			<classpath>
				<dirset dir="${basedir}">
					<include name="bin" />
				</dirset>
				<path refid="${kernel.cp}" />
			</classpath>
			<arg value="${i2b2.dir}" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="setup.v_i2b2_fword_lookup" description="load i2b2 docs and annotations">
		<antcall target="mysql">
			<param name="mysql.dir" value="${basedir}/data" />
			<param name="mysql.script" value="v_i2b2_fword_lookup.sql" />
		</antcall>
	</target>
	<target name="InfoContentEvaluator" description="run the InfoContentEvaluator">
		<java classname="ytex.kernel.InfoContentEvaluatorImpl" classpathref="${kernel.cp}" fork="yes" dir="${basedir}/data">
			<arg value="-prop" />
			<arg value="corpus.properties.xml" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="ImputedFeatureEvaluator" description="run the ImputedFeatureEvaluator">
		<java classname="ytex.kernel.ImputedFeatureEvaluatorImpl" classpathref="${kernel.cp}" fork="yes" dir="${basedir}/data" failonerror="yes">
			<arg value="-prop" />
			<arg value="corpus.properties.xml" />
			<jvmarg value="-Xmx${maxMemory}" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="RunCPE.all" description="annotate i2b2 2008 corpus in parallel">
		<for list="${kernel.slices}" param="kernel.slice" parallel="yes" threadCount="${kernel.mod}">
			<sequential>
				<antcall target="RunCPE.slice">
					<param name="kernel.slice" value="@{kernel.slice}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="RunCPE.slice">
		<property name="kernel.slice" value="1" />
		<makeurl property="collectionreader.url" file="${ytex.home}/config/desc/ytex/uima/DBCollectionReader.xml" />
		<makeurl property="pipeline.url" file="${ytex.home}/config/desc/ytex/uima/YTEXPipeline.xml" />
		<copy file="desc/cpe.template.xml" tofile="desc/cpe.xml.${kernel.slice}" overwrite="yes">
			<filterset id="exp.filter">
				<filter token="collectionreader.url" value="${collectionreader.url}" />
				<filter token="pipeline.url" value="${pipeline.url}" />
				<filter token="kernel.slice" value="${kernel.slice}" />
				<filter token="kernel.mod" value="${kernel.mod}" />
			</filterset>
		</copy>
		<java classname="ytex.tools.RunCPE" fork="yes" dir="${basedir}/desc">
			<classpath>
				<dirset dir="${basedir}">
					<include name="${basedir}/desc" />
				</dirset>
				<path refid="${kernel.cp}" />
			</classpath>
			<arg value="cpe.xml.${kernel.slice}" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="setup.tfidf" description="calculate tfidf stats">
		<antcall target="mysql">
			<param name="mysql.dir" value="${basedir}/data" />
			<param name="mysql.script" value="tfidf-cui.sql" />
		</antcall>
	</target>
	<target name="setup.generateConceptGraph" description="generate concept graph used to impute infogain">
		<mkdir dir="${ytex.conceptGraphDir}" />
		<java classname="ytex.kernel.dao.ConceptDaoImpl" classpathref="${kernel.cp}" fork="yes" dir="${basedir}/data" failonerror="yes">
			<arg value="-prop" />
			<arg value="corpus.properties.xml" />
			<jvmarg value="-Xmx1g" />
			<syspropertyset>
				<propertyset refid="ytex.jvm.props" />
			</syspropertyset>
		</java>
	</target>
	<target name="setup.generateFolds" description="generate folds, store in cv_fold">
		<java classname="ytex.kernel.FoldGeneratorImpl" classpathref="${kernel.cp}" fork="yes" dir="${basedir}/data" failonerror="yes">
			<arg value="-prop" />
			<arg value="infogain-usword.xml" />
			<jvmarg value="-Xmx1g" />
			<syspropertyset>
				<propertyset refid="ytex.jvm.props" />
			</syspropertyset>
		</java>
	</target>
	<target name="eval.infogain" description="run WekaAttributeEvaluator to evaluate infogain for specified dir and prop file">
		<property name="eval.infogain.dir" value="./data" />
		<property name="eval.infogain.prop" value="infogain-usword.xml" />
		<java classname="ytex.weka.WekaAttributeEvaluatorImpl" classpathref="${kernel.cp}" fork="yes" dir="${eval.infogain.dir}" failonerror="yes">
			<arg value="-prop" />
			<arg value="${eval.infogain.prop}" />
			<jvmarg value="-Xmx1g" />
			<syspropertyset>
				<propertyset refid="ytex.jvm.props" />
			</syspropertyset>
		</java>
	</target>
	<target name="insert.hotspot" description="insert hotspots for experiment">
		<property name="insert.hotspot.dir" value="${basedir}/exp/${kernel.experiment}" />
		<property name="insert.hotspot.sql" value="insert_hotspot.sql" />
		<antcall target="mysql">
			<param name="mysql.dir" value="${insert.hotspot.dir}" />
			<param name="mysql.script" value="${insert.hotspot.sql}" />
		</antcall>
	</target>
	<!-- cross validation targets -->
	<target name="init.exp">
		<property file="${basedir}/exp/${kernel.experiment}/experiment.properties" />
		<property name="kernel.cv.experiment" value="${kernel.experiment}" />
		<property name="kernel.hzv.experiment" value="${kernel.experiment}" />
		<property name="kernel.algo" value="libsvm" />
		<property name="kernel.export.dir" value="${basedir}/${kernel.algo}/${kernel.experiment}" />
		<filterset id="exp.filter">
			<filter token="kernel.name" value="${kernel.name}" />
			<filter token="kernel.experiment" value="${kernel.experiment}" />
			<filter token="kernel.hzv.experiment" value="${kernel.hzv.experiment}" />
			<filter token="kernel.cv.experiment" value="${kernel.cv.experiment}" />
		</filterset>
	</target>
	<target name="clean.exp" depends="init.exp" description="delete all classifier_eval records for the experiment">
		<delete dir="${kernel.export.dir}" quiet="yes" />
		<mkdir dir="${kernel.export.dir}" />
		<antcall target="mysql.template">
			<param name="mysql.script" value="clean_ce_experiment.sql" />
		</antcall>
	</target>
	<target name="cv.word.all">
		<property name="kernel.experiment" value="word" />
		<antcall target="insert.hotspot" />
		<antcall target="cv.exp.all" />
	</target>
	<target name="cv.imputed.all">
		<property name="kernel.experiment" value="imputed" />
		<antcall target="insert.hotspot" />
		<antcall target="cv.exp.all" />
	</target>
	<target name="cv.exp.all">
		<antcall target="clean.exp" />
		<antcall target="export.cutoffs" />
		<antcall target="libsvm.iter.dirs" />
		<antcall target="cv.irzv" />
		<antcall target="cv.getBestParams" />
	</target>
	<target name="cv.irzv" depends="init.exp" description="adjust truth tables with zero vectors">
		<antcall target="mysql.template">
			<param name="mysql.script" value="cv_irzv.sql" />
			<param name="mysql.outfile" value="${basedir}/${kernel.algo}/${kernel.experiment}/results.txt" />
		</antcall>
	</target>
	<target name="cv.getBestParams" depends="init.exp" description="adjust truth tables with zero vectors">
		<antcall target="mysql.template">
			<param name="mysql.script" value="getBestParams.sql" />
		</antcall>
	</target>
	<target name="mysql.template" depends="init.exp" description="setup truth table for ontocuis">
		<property name="kernel.hzv.experiment" value="${kernel.experiment}" />
		<copy file="data/${mysql.script}" tofile="${basedir}/${kernel.algo}/${kernel.experiment}/${mysql.script}" overwrite="yes">
			<filterset>
				<filterset refid="exp.filter" />
			</filterset>
		</copy>
		<antcall target="mysql">
			<param name="mysql.dir" value="libsvm/${kernel.experiment}" />
			<param name="mysql.script" value="${mysql.script}" />
		</antcall>
	</target>
	<target name="export.cutoffs" depends="init.exp" description="export libsvm data">
		<property name="export.cutoff.target" value="export.cutoff" />
		<for list="${export.cutoffs}" param="export.cutoff" parallel="yes" threadCount="2">
			<sequential>
				<antcall target="${export.cutoff.target}">
					<param name="export.cutoff" value="@{export.cutoff}" />
					<param name="experiment.base" value="${kernel.experiment}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="export.cutoff" depends="init.exp" description="export libsvm data for specified cutoff">
		<property name="export.cutoff" value="1" />
		<property name="export.dir" value="${kernel.algo}/${kernel.experiment}/${export.cutoff}" />
		<!-- generate script to find zero vectors for cutoff -->
		<delete dir="${export.dir}" quiet="yes" />
		<mkdir dir="${export.dir}" />
		<filterset id="export.filterset">
			<filter token="export.cutoff" value="${export.cutoff}" />
			<filterset refid="exp.filter" />
		</filterset>
		<!-- generate export property file -->
		<copy todir="${export.dir}" overwrite="yes">
			<fileset dir="exp/${kernel.experiment}" includes="*.template" />
			<globmapper from="*.template" to="*" />
			<filterset refid="export.filterset" />
		</copy>
		<!-- export the data -->
		<antcall target="SparseDataExporter">
			<param name="export.type" value="${kernel.algo}" />
			<param name="export.dir" value="${export.dir}" />
		</antcall>
		<!-- svmlin only - get positive class fractions -->
		<if>
			<equals arg1="${kernel.algo}" arg2="svmlin" />
			<then>
				<antcall target="export.classrel" />
			</then>
		</if>
	</target>
	<target name="export.classrel" depends="init.exp" description="export positive class fraction for svmlin">
		<property name="export.cutoff" value="0.05" />
		<property name="export.dir" value="${kernel.algo}/${kernel.experiment}/${export.cutoff}" />
		<filterset id="export.filterset">
			<filter token="export.cutoff" value="${export.cutoff}" />
			<filterset refid="exp.filter" />
		</filterset>
		<copy file="${basedir}/data/svmlin_classrel.sql" todir="${export.dir}" overwrite="yes">
			<filterset refid="export.filterset" />
		</copy>
		<exec executable="${mysql.home}/mysql" dir="${export.dir}" failonerror="yes" output="${export.dir}/classWeights.properties" append="no">
			<arg line="${mysql.line}" />
			<arg value="--skip-column-names" />
			<arg value="--raw" />
			<arg value="-e" />
			<arg value="source svmlin_classrel.sql" />
		</exec>
	</target>
	<target name="test.exp.all" depends="init.exp" description="train model on training set using optimal params, test on test set">
		<!-- cleanup libsvm dir, cleanup database -->
		<antcall target="clean.exp" />
		<!-- copy files -->
		<copy todir="${kernel.export.dir}">
			<fileset dir="${basedir}/exp/${kernel.experiment}" includes="export-bow.xml,kernel.properties" />
		</copy>
		<!-- libsvm export -->
		<antcall target="SparseDataExporter">
			<param name="export.dir" value="${kernel.export.dir}" />
		</antcall>
		<!-- export optimal params -->
		<copy todir="${kernel.export.dir}" file="${basedir}/data/genLibsvmParams.sql">
			<filterset refid="exp.filter" />
		</copy>
		<antcall target="mysql.template">
			<param name="mysql.dir" value="${kernel.export.dir}" />
			<param name="mysql.script" value="genLibsvmParams.sql" />
			<param name="mysql.outfile" value="${kernel.export.dir}/parameters.properties" />
		</antcall>
		<echo>run libsvm on directory ${export.dir}</echo>
		<ant antfile="build.xml" dir="${ytex.home}/ytex.kernel/scripts" target="process.dir" inheritall="true">
			<property name="ytex.home" value="${ytex.home}" />
			<property name="kernel.data" value="${kernel.export.dir}" />
		</ant>
		<antcall target="test.irzv" />
	</target>
	<target name="test.irzv" depends="init.exp">
		<echo>computing f1 scores, writing results to ${kernel.export.dir}/results.txt</echo>
		<antcall target="mysql.template">
			<param name="mysql.script" value="test_irzv.sql" />
			<param name="mysql.outfile" value="${kernel.export.dir}/results.txt" />
		</antcall>
	</target>
	<target name="libsvm.iter.dirs" depends="init.exp" description="launch libsvm">
		<ant antfile="build.xml" dir="${ytex.home}/ytex.kernel/scripts" target="iter.dirs" inheritall="true">
			<property name="ytex.home" value="${ytex.home}" />
			<property name="kernel.exp.base" value="${basedir}/libsvm/${kernel.experiment}" />
		</ant>
	</target>
	<target name="kernel.all" depends="kernel.eval.all,kernel.export.all,libsvm.iter.dirs,cv.irzv,cv.getBestParams" description="evaluate kernel on corpus, run libsvm, update ir metrics w/ zero vectors" />
	<target name="kernel.iter.label" description="execute kernel.iter.target for each label in label.properties">
		<property file="./tree/${tree.name}/label.properties" />
		<for list="${labels}" param="export.label">
			<sequential>
				<antcall target="${kernel.iter.target}">
					<param name="export.label" value="@{export.label}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="kernel.tree.all" depends="init.exp" description="export trees">
		<!-- property name="tree.name" value="tree-cuiword" / -->
		<antcall target="kernel.iter.label">
			<param name="kernel.iter.target" value="kernel.tree.label" />
		</antcall>
	</target>
	<target name="kernel.eval.all" depends="init.exp" description="eval kernel on tree">
		<antcall target="kernel.iter.label">
			<param name="kernel.iter.target" value="kernel.iter.eval.label" />
		</antcall>
	</target>
	<target name="kernel.export.all" depends="init.exp" description="export libsvm gram matrices">
		<property name="kernel.experiment" value="filteredlin" />
		<!-- property name="tree.name" value="vector" / -->
		<antcall target="kernel.iter.label">
			<param name="kernel.iter.target" value="kernel.iter.export.label" />
		</antcall>
	</target>
	<target name="kernel.init.label" depends="init.exp" description="load the export.cutoff for the specified label">
		<property name="tree.name" value="tree-cui" />
		<property name="export.label" value="Hypertriglyceridemia" />
		<property name="kernel.experiment" value="superlin" />
		<property name="export.tree.srcdir" value="./exp/${tree.name}" />
		<property name="export.tree.basedir" value="./tree/${tree.name}" />
		<property name="export.tree.outdir" value="./tree/${tree.name}/${export.label}" />
		<property name="export.libsvm.outdir" value="libsvm/${kernel.experiment}" />
		<echo>export.param2.list ${export.param2.list}</echo>
		<!--
		<property name="label.tree" value="tree_${export.cutoff}" />
		-->
		<property name="label.tree" value="tree" />
		<filterset id="export.filterset">
			<filterset refid="exp.filter" />
			<filter token="export.label" value="${export.label}" />
			<filter token="export.cutoff" value="${export.cutoff}" />
		</filterset>
	</target>
	<target name="kernel.tree.label" depends="kernel.init.label" description="export the tree for the given label">
		<mkdir dir="${export.tree.outdir}" />
		<copy file="${export.tree.srcdir}/tree.xml" tofile="${export.tree.outdir}/${label.tree}.xml" overwrite="yes">
			<filterset>
				<filterset refid="export.filterset" />
			</filterset>
		</copy>
		<java classname="ytex.KernelLauncher" fork="yes" classpathref="${kernel.cp}" dir="${export.tree.outdir}">
			<arg line="-beans ${label.tree}.xml -storeInstanceMap ${label.tree}.obj" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="kernel.iter.eval.label" depends="kernel.init.label" description="call kernel.iter.param2 with kernel.eval.label as target">
		<antcall target="kernel.iter.param2">
			<param name="kernel.param2.target" value="kernel.eval.label" />
		</antcall>
	</target>
	<target name="kernel.iter.export.label" depends="kernel.init.label" description="call kernel.iter.param2 with kernel.export.label as target">
		<antcall target="kernel.iter.param2">
			<param name="kernel.param2.target" value="kernel.export.label" />
		</antcall>
	</target>
	<target name="kernel.iter.param2" depends="kernel.init.label" description="iterate over export.param2.list, call kernel.param2.target">
		<if>
			<isset property="export.param2.list" />
			<then>
				<for list="${export.param2.list}" param="export.param2">
					<sequential>
						<echo>export.param2  @{export.param2}</echo>
						<antcall target="${kernel.param2.target}">
							<param name="export.param2.suffix" value="_@{export.param2}" />
							<param name="export.param2" value="@{export.param2}" />
						</antcall>
					</sequential>
				</for>
			</then>
			<else>
				<echo>export.param2.list not set</echo>
				<antcall target="${kernel.param2.target}" />
			</else>
		</if>
	</target>
	<target name="kernel.eval.label" depends="kernel.init.label" description="evaluate kernel on instance tree map">
		<property name="export.param2.suffix" value="" />
		<property name="export.param2" value="1" />
		<echo>export.param2 ${export.param2}</echo>
		<property name="kernel.xml" value="${kernel.experiment}_${export.cutoff}${export.param2.suffix}.xml" />
		<property name="kernel.evalTest" value="no" />
		<copy file="exp/${kernel.experiment}/${kernel.experiment}.xml" tofile="${export.tree.outdir}/${kernel.xml}" overwrite="yes">
			<filterset>
				<filterset refid="export.filterset" />
				<filter token="export.param2" value="${export.param2}" />
			</filterset>
		</copy>
		<antcall target="kernel.eval.label.local" />
		<antcall target="kernel.eval.label.cluster" />
	</target>
	<target name="kernel.eval.label.local" unless="kernel.cluster" description="launch multiple processes to evaluate kernel">
		<for list="${kernel.slices}" param="kernel.slice" parallel="yes" threadCount="${kernel.mod}">
			<sequential>
				<antcall target="kernel.eval.slice">
					<param name="kernel.slice" value="@{kernel.slice}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="kernel.eval.label.cluster" if="kernel.cluster" description="send slices to slaves for processing">
		<!-- pass the properties to the slave that aren't in ytex.properties -->
		<exec executable="qsub">
			<arg line="-sync y -t 1-${kernel.mod} ${i2b2ant.pbs} kernel.eval.slice.cluster -Dexport.tree.outdir=${export.tree.outdir} -Dlabel.tree=${label.tree} -Dkernel.xml=${kernel.xml} -Dkernel.evalTest=${kernel.evalTest}" />
		</exec>
	</target>
	<target name="kernel.eval.slice.cluster" if="kernel.cluster" description="eval slice on cluster slave">
		<property name="kernel.slice" value="${env.SGE_TASK_ID}" />
		<property file="${export.tree.outdir}/kernel.properties" />
		<echo>kernel.slice ${kernel.slice}</echo>
		<antcall target="kernel.eval.slice" />
	</target>
	<target name="kernel.eval.slice" description="eval slice">
		<echo>export.tree.outdir ${export.tree.outdir}</echo>
		<echo>kernel.xml ${kernel.xml}</echo>
		<echo>kernel.slice ${kernel.slice}</echo>
		<echo>kernel.evalTest ${kernel.evalTest}</echo>
		<java classname="ytex.kernel.evaluator.CorpusKernelEvaluatorImpl" dir="${export.tree.outdir}" fork="yes" classpathref="${kernel.cp}">
			<arg line="-beans ${kernel.xml} -loadInstanceMap ${label.tree}.obj -mod ${kernel.mod} -slice ${kernel.slice} -evalTest ${kernel.evalTest}" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="kernel.export.label" depends="kernel.init.label" description="export libsvm gram matrix for specified label">
		<property name="export.param2.suffix" value="" />
		<property name="export.param2" value="" />
		<property name="export.dir" value="${export.libsvm.outdir}/${export.cutoff}${export.param2.suffix}" />
		<property name="export.xml" value="export_${export.label}.xml" />
		<echo>export.dir/export.xml ${export.dir}/${export.xml}</echo>
		<mkdir dir="${export.dir}" />
		<copy file="${export.tree.srcdir}/export.xml" tofile="${export.dir}/${export.xml}" overwrite="yes">
			<filterset>
				<filterset refid="export.filterset" />
				<filter token="export.param2" value="${export.param2}" />
			</filterset>
		</copy>
		<copy file="exp/${kernel.experiment}/kernel.properties.template" tofile="${export.dir}/kernel.properties" overwrite="yes">
			<filterset>
				<filterset refid="export.filterset" />
				<filter token="export.param2" value="${export.param2}" />
			</filterset>
		</copy>
		<java classname="ytex.libsvm.LibSVMGramMatrixExporterImpl" classpathref="${kernel.cp}" fork="yes" dir="${export.dir}">
			<arg value="-prop" />
			<arg value="${export.xml}" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="SparseDataExporter" description="run the SparseDataExporter from export.dir, property file export.prop, type export.type">
		<property name="export.prop" value="export-bow.xml" />
		<property name="export.type" value="libsvm" />
		<java classname="ytex.kernel.SparseDataExporterImpl" fork="yes" classpathref="${kernel.cp}" dir="${export.dir}" failonerror="yes">
			<arg value="-prop" />
			<arg value="${export.prop}" />
			<arg value="-type" />
			<arg value="${export.type}" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="mysql" depends="mysql.nooutput,mysql.output" />
	<target name="mysql.nooutput" unless="mysql.outfile" description="run specified script">
		<exec executable="${mysql.home}/mysql" dir="${mysql.dir}" failonerror="yes">
			<arg line="${mysql.line}" />
			<arg value="-e" />
			<arg value="source ${mysql.script}" />
		</exec>
	</target>
	<target name="mysql.output" if="mysql.outfile" description="run specified script, output to file">
		<exec executable="${mysql.home}/mysql" dir="${mysql.dir}" failonerror="yes" output="${mysql.outfile}" append="no">
			<arg line="${mysql.line}" />
			<arg value="--skip-column-names" />
			<arg value="--raw" />
			<arg value="-e" />
			<arg value="source ${mysql.script}" />
		</exec>
	</target>

	<target name="test.init.exp" depends="init.exp" description="load prperties for the specified experiment">
		<property name="export.dir" value="${basedir}/${kernel.algo}/${kernel.experiment}" />
		<property name="export.src.dir" value="${basedir}/exp/${kernel.experiment}" />
	</target>
	<target name="test.init.label" depends="test.init.exp" description="load properties for the specified label">
		<property name="export.label" value="16" />
		<property file="${basedir}/exp/${kernel.experiment}/experiment.properties" />
		<propertycopy property="kernel.param1" from="label.${export.label}.kernel.param1" silent="yes" />
		<propertycopy property="kernel.param2" from="label.${export.label}.kernel.param2" silent="yes" />
		<property name="kernel.param1" value="" />
		<property name="kernel.param2" value="" />
		<filterset id="export.filterset">
			<filter token="export.cutoff" value="${kernel.param1}" />
			<filter token="export.label" value="${export.label}" />
			<filter token="export.param2" value="${kernel.param2}" />
			<filter token="kernel.name" value="${kernel.name}" />
			<filter token="kernel.experiment" value="${kernel.experiment}" />
			<filter token="kernel.hzv.experiment" value="${kernel.hzv.experiment}" />
			<filter token="kernel.types" value="${kernel.types}" />
		</filterset>
	</target>
	<target name="kern.test.all" depends="test.init.exp,test.copy.props">
		<property name="test.all.target" value="test.label" />
		<for list="${labels}" param="export.label">
			<sequential>
				<antcall target="${test.all.target}">
					<param name="export.label" value="@{export.label}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="test.copy.props" depends="test.init.exp" description="copy props">
		<copy todir="${export.dir}" overwrite="yes">
			<fileset dir="${export.src.dir}" includes="parameters.properties,kernel.properties" />
		</copy>
	</target>
	<target name="test.label" depends="test.init.label" description="export libsvm data for the specified label, run libsvm">
		<antcall target="test.kernel.eval.label" />
		<antcall target="test.kernel.export.label" />
		<antcall target="test.libsvm.label" />
	</target>
	<target name="test.kernel.eval.label" depends="test.init.label" if="eval.kernel" description="evaluate kernel on test instances">
		<!-- export the tree -->
		<antcall target="kernel.tree.label" />
		<!-- evaluate the kernel -->
		<antcall target="kernel.iter.eval.label">
			<param name="export.param2.list" value="${kernel.param2}" />
			<param name="kernel.evalTest" value="yes" />
		</antcall>
	</target>
	<target name="test.kernel.export.label" depends="test.init.label" unless="eval.bag" description="export gram matrix">
		<!-- generate export property file -->
		<copy tofile="${export.dir}/export-gram_${export.label}.xml" overwrite="yes" file="${export.src.dir}/export-gram.xml">
			<filterset refid="export.filterset" />
		</copy>
		<java classname="ytex.libsvm.LibSVMGramMatrixExporterImpl" classpathref="${kernel.cp}" fork="yes" dir="${export.dir}">
			<arg value="-prop" />
			<arg value="export-gram_${export.label}.xml" />
			<jvmarg value="-Xmx1g" />
			<jvmarg value="-Xms1g" />
			<jvmarg value="${log4j.arg}" />
			<jvmarg value="${java.log.arg}" />
		</java>
	</target>
	<target name="test.libsvm.label" depends="test.init.label" description="run libsvm">
		<echo>run libsvm on directory export.dir</echo>
		<echo>export.dir ${export.dir}</echo>
		<ant antfile="build.xml" dir="${ytex.home}/ytex.kernel/scripts" target="process.dir" inheritall="true">
			<property name="ytex.home" value="${ytex.home}" />
			<property name="kernel.data" value="${export.dir}" />
		</ant>
	</target>
	<target name="echo.exp">
		<echo>${kernel.experiment}</echo>
	</target>
	<target name="temp">
		<antcall target="cv.exp.all">
			<param name="kernel.experiment" value="imputed" />
		</antcall>
		<antcall target="cv.exp.all">
			<param name="kernel.experiment" value="cui" />
		</antcall>
	</target>
</project>
