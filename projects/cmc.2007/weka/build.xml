<project name="cmc-weka">
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<property name="ytex.home" value="../../" />
	<property name="ytex.kernel.cp" value="${ytex.home}/ytex.kernel/bin" />
	<property name="ytex.lib.home" value="${ytex.home}/ytex.web/WebContent/WEB-INF/lib" />
	<property name="weka.jar" value="${ytex.lib.home}/weka.jar" />
	<property name="ytex.properties" value="${ytex.home}/config/desc/ytex.properties" />
	<property file="${ytex.properties}" />
	<property name="mysql.line" value="--user=${db.username} --password=${db.password} --host=${db.host} ${db.schema}" />
	<property name="mysql.bin.home" value="C:\Program Files\MySQL\MySQL Server 5.1\bin" />
	

	<property name="cv.dir" value="./cv" />
	<property name="test.dir" value="./test" />
	<path id="weka.cp">
		<pathelement location="${ytex.kernel.cp}" />
		<pathelement location="${weka.jar}" />
	</path>

	<property name="columnIndices" value="3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47" />
	<target name="cv.generateLabelArff.all">
		<for list="${columnIndices}" param="columnIndex">
			<sequential>
				<java classname="weka.filters.unsupervised.attribute.Remove" classpathref="weka.cp">
					<arg value="-V" />
					<arg value="-R" />
					<arg value="2,@{columnIndex}" />
					<arg value="-i" />
					<arg value="cmc-train-gram.arff" />
					<arg value="-o" />
					<arg value="cv/train-@{columnIndex}.arff" />
				</java>
			</sequential>
		</for>
	</target>
	<target name="cv.runExperiment.all">
		<for list="${columnIndices}" param="columnIndex" parallel="yes" threadcount="4">
			<sequential>
				<antcall target="cv.runExperiment">
					<param name="columnIndex" value="@{columnIndex}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="cv.runExperiment">
		<property name="columnIndex" value="10" />
		<property name="exp.prefix" value="cmc.train.exp" />
		<copy file="${exp.prefix}.template.xml" tofile="cv/${exp.prefix}.${columnIndex}.xml" overwrite="yes">
			<filterset>
				<filter token="INDEX" value="${columnIndex}" />
			</filterset>
		</copy>
		<java classname="weka.experiment.Experiment" classpathref="weka.cp" fork="yes">
			<jvmarg value="-Xmx300m" />
			<arg value="-l" />
			<arg value="cv/${exp.prefix}.${columnIndex}.xml" />
			<arg value="-r" />
		</java>
		<!--
		<delete file="cmc.train.exp.${columnIndex}.xml" quiet="yes"/>
		-->
	</target>
	<target name="load.cv.all" description="load all cross-validation output, calls load.cv.experiment">
		<for list="cv,cv-r" param="csvFilePrefix">
			<sequential>
				<antcall target="load.cv.experiment">
					<param name="csvFilePrefix" value="@{csvFilePrefix}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="load.cv.experiment" description="load all cross-validation output for a given experimet, calls load.cv">
		<property name="csvFilePrefix" value="cv" />
		<for list="${columnIndices}" param="columnIndex">
			<sequential>
				<antcall target="load.cv">
					<param name="columnIndex" value="@{columnIndex}" />
				</antcall>
			</sequential>
		</for>
	</target>
	<target name="load.cv" description="load cross-validation output from specified csv file">
		<property name="columnIndex" value="3" />
		<property name="arff.file" value="${cv.dir}/train-${columnIndex}.arff" />
		<!-- read out the icd-9 code -->
		<script language="beanshell" classpathref="weka.cp">
			<![CDATA[
			import weka.core.converters.*;
			import java.io.*;
			String strResultFile = project.getProperty("arff.file");
			System.out.println(strResultFile);
			ArffLoader loader = new ArffLoader();
			loader.setFile(new File(strResultFile));
			String labelName = loader.getDataSet().attribute(1).name();
			project.setProperty("label", labelName);
		]]>
		</script>
		<echo>label ${label}</echo>
		<!-- load into db - create temporary load script and run it -->
		<copy file="load_cv.template.sql" tofile="${cv.dir}/load_cv.tmp.sql" overwrite="yes">
			<filterset>
				<filter token="FILE" value="${csvFilePrefix}-${columnIndex}.csv" />
				<filter token="EXPERIMENT" value="cmc-${csvFilePrefix}" />
				<filter token="LABEL" value="${label}" />
			</filterset>
		</copy>
		<exec executable="${mysql.bin.home}/mysql" dir="${cv.dir}">
			<arg line="${mysql.line} -e &quot;source load_cv.tmp.sql&quot;" />
		</exec>
	</target>
	<target name="test.initLabel" description="get the name of the attribute of the specified column from the specified arff file">
		<property name="columnIndex" value="4" />
		<property name="arff.file" value="${test.dir}/cmc-train-${columnIndex}.arff" />
		<!-- read out the icd-9 code -->
		<script language="beanshell" classpathref="weka.cp">
			<![CDATA[
			import weka.core.converters.*;
			import java.io.*;
			try {
				String strResultFile = project.getProperty("arff.file");
				System.out.println(strResultFile);
				ArffLoader loader = new ArffLoader();
				loader.setFile(new File(strResultFile));
				String labelName = loader.getDataSet().attribute(1).name();
				project.setProperty("label", labelName);
			} catch (Exception e) {
				e.printStackTrace();
			}
		]]>
		</script>
		<echo>label ${label}</echo>
	</target>

	<target name="test.evaluate.all">
		<for list="${columnIndices}" param="columnIndex" parallel="yes" threadcount="4">
			<sequential>
				<antcall target="test.splitAndEvaluate">
					<param name="columnIndex" value="@{columnIndex}" />
				</antcall>
			</sequential>
		</for>
	</target>

	<target name="test.splitAndEvaluate" description="generate arff file with just gram index and label, evaluate">
		<property name="columnIndex" value="4" />
		<antcall target="test.selectColumn" />
		<antcall target="test.evaluate" />
	</target>

	<target name="test.evaluate" depends="test.initCost" if="columnIndex" description="read cost and if should resample, and run the classifier">
		<if>
			<equals arg1="${resample}" arg2="yes" />
			<then>
				<antcall target="test.classifyResample" />
			</then>
			<else>
				<antcall target="test.classifyNoResample" />
			</else>
		</if>
	</target>

	<target name="test.initCost" depends="test.initLabel" if="arff.file">
		<loadproperties srcFile="best_params.properties">
			<filterchain>
				<linecontains>
					<contains value="${label}." />
				</linecontains>
				<replacestring from="${label}." to="" />
			</filterchain>
		</loadproperties>
		<echo>${cost} ${resample}</echo>
	</target>

	<target name="test.split.gram" description="split cmc-all-gram.arff into train/test sets">
		<property name="columnIndex" value="4" />
		<echo>split into train/test set</echo>
		<java classname="weka.filters.unsupervised.instance.RemoveWithValues" classpathref="weka.cp">
			<arg line="-i cmc-all-gram.arff -o ${test.dir}/cmc-all-train-gram.arff -S 1.0 -C last -L last -V" />
		</java>
		<java classname="weka.filters.unsupervised.instance.RemoveWithValues" classpathref="weka.cp">
			<arg line="-i cmc-all-gram.arff -o ${test.dir}/cmc-all-test-gram.arff -S 1.0 -C last -L last" />
		</java>
	</target>
	<target name="test.selectColumn" description="throw out all columns except for gram index and class label">
		<property name="columnIndex" value="4" />
		<antcall target="removeColumns">
			<param name="columnIndex" value="${columnIndex}" />
			<param name="remove.source.arff" value="${test.dir}/cmc-all-train-gram.arff" />
			<param name="remove.target.arff" value="${test.dir}/cmc-train-${columnIndex}.arff" />
		</antcall>
		<antcall target="removeColumns">
			<param name="columnIndex" value="${columnIndex}" />
			<param name="remove.source.arff" value="${test.dir}/cmc-all-test-gram.arff" />
			<param name="remove.target.arff" value="${test.dir}/cmc-test-${columnIndex}.arff" />
		</antcall>
	</target>
	<target name="test.classifyResample" description="resample train set, train classifer, evaluate on test set">
		<property name="columnIndex" value="4" />
		<property name="cost" value="1" />
		<property name="train.arff" value="${test.dir}/cmc-train-${columnIndex}.arff" />
		<property name="test.arff" value="${test.dir}/cmc-test-${columnIndex}.arff" />
		<java classname="weka.classifiers.meta.FilteredClassifier" classpathref="weka.cp" output="${test.dir}/results-${columnIndex}.txt">
			<arg line="-t ${train.arff} -T ${test.arff} -F &quot;weka.filters.supervised.instance.Resample -B 1.0 -S 1 -Z 100.0&quot; -W weka.classifiers.functions.SMO -- -C ${cost} -L 0.0010 -P 1.0E-12 -N 2 -V -1 -W 1 -K &quot;weka.classifiers.functions.supportVector.NumericPrecomputedKernelMatrixKernel -M cmc-all-gram.matrix&quot;" />
		</java>
	</target>
<!--
weka.classifiers.functions.SMO -C 10000.0 -L 0.0010 -P 1.0E-12 -N 2 -M -V -1 -W 1 -K "weka.classifiers.functions.supportVector.NumericPrecomputedKernelMatrixKernel -M E:\\projects\\ytex\\cmc\\weka\\cmc-all-gram.matrix"
-->	
	<target name="test.classifyNoResample" description="train classifer on training set, evaluate on test set">
		<property name="columnIndex" value="4" />
		<property name="cost" value="1" />
		<property name="train.arff" value="${test.dir}/cmc-train-${columnIndex}.arff" />
		<property name="test.arff" value="${test.dir}/cmc-test-${columnIndex}.arff" />
		<java classname="weka.classifiers.functions.SMO" classpathref="weka.cp" output="${test.dir}/results-${columnIndex}.txt">
			<arg line="-p -t ${train.arff} -T ${test.arff} -C ${cost} -L 0.0010 -P 1.0E-12 -N 2 -M -V -1 -W 1 -K &quot;weka.classifiers.functions.supportVector.NumericPrecomputedKernelMatrixKernel -M cmc-all-gram.matrix&quot;" />
		</java>
	</target>

	<target name="removeColumns" description="remove all columns except gram index and specified column">
		<property name="columnIndex" value="4" />
		<property name="remove.source.arff" value="${test.dir}/cmc-all-train-gram.arff" />
		<property name="remove.target.arff" value="${test.dir}/cmc-train-${columnIndex}.arff" />
		<java classname="weka.filters.unsupervised.attribute.Remove" classpathref="weka.cp" fork="yes">
			<jvmarg value="-Xmx300m"/>
			<arg value="-V" />
			<arg value="-R" />
			<arg value="2,${columnIndex}" />
			<arg value="-i" />
			<arg value="${remove.source.arff}" />
			<arg value="-o" />
			<arg value="${remove.target.arff}" />
		</java>
	</target>

	<target name="test.consolidateResult.all">
		<delete file="${test.dir}/results-all.txt" quiet="yes" />
		<for list="${columnIndices}" param="columnIndex">
			<sequential>
				<antcall target="test.consolidateResult">
					<param name="columnIndex" value="@{columnIndex}" />
				</antcall>
			</sequential>
		</for>
	</target>

	<!--
	Turn confusion matrix from this
 975   0 |   a = 0
   1   0 |   b = 1
	into this: (label, tn, fp, fn, tp)
788.0 975 0 1 0
	-->
	<target name="test.consolidateResult" depends="test.initLabel">
		<property name="columnIndex" value="4" />
		<loadfile property="confusionMatrix" srcfile="${test.dir}/results-${columnIndex}.txt">
			<filterchain>
				<tailfilter lines="4" />
				<!-- select lines in confusion matrix -->
				<linecontainsregexp>
					<regexp pattern="\s+\d+\s+\d+\s+\|" />
				</linecontainsregexp>
				<!-- chop off everything after pipe -->
				<replaceregex pattern="\|.*" replace="" />
				<!-- compress spaces -->
				<replaceregex pattern=" {2,20}" replace=" " flags="g" />
				<!-- chop off leading spaces -->
				<replaceregex pattern="^\s+" replace="" />
				<!-- single line -->
				<deletecharacters chars="\r\n" />
			</filterchain>
		</loadfile>
		<echo file="${test.dir}/results-all.txt" append="yes">${label} ${confusionMatrix}
</echo>
	</target>

</project>
